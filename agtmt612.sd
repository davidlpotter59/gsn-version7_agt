%%                      
Screen
        Name = "agtmt612";
        Type = "Detail" ;
        Highlight=Underscore ;
        Padcharacter=Space ;
        Screensize="dynamic";
        Windowtitle="%a     %s Rating Information    %m";
        Domain="agqname" ;
        resizeable = yes ;
        iconline = 0 ;
        autoaccept = true ;

        Global Unsigned Ascii Number G_APP_NO[11] ;
        Global Unsigned Ascii Number G_LINE_OF_BUSINESS[4] ;
        Global Unsigned Ascii Number G_OPT[2] ;
        global unsigned ascii number g_add_prem_no[1] ;
        global unsigned ascii number g_add_build_no[1] ;
        global unsigned ascii number g_add_new_quote[1] ;
        global unsigned ascii number g_prem_no[4] ;
        global unsigned ascii number g_build_no[4];
        global unsigned ascii number g_from_search_screen[1] ;
        global unsigned ascii number g_form[1] ;
        global unsigned ascii number g_state[2] ;
        global unsigned ascii number g_protection[2] ;
        global unsigned ascii number g_policy_no[9] ;
        global unsigned ascii number g_year[4] ;
        global unsigned ascii number g_end_sequence[4] ;

        global string g_company_id[10] ,
                      g_zipcode_change[1] ,
                      g_initial_screen[50],
                      g_inquiry[1] ,
                      g_code[7] ,
                      g_str_state[2] ,
                      g_ok_to_continue[1] ;

        global wdate g_eff_date ,
                     g_exp_date;

        rwdate l_sfqname_eff_date;
        wdate  l_rich_date;
        rwdate l_score_received_date ;

        number function check_required_fields_for_credit_score();

        local signed ascii number l_billing_amount[9]=0/dec=2;

        Local Unsigned Ascii Number L_SUB_CODE[4] ,
                                    l_billing_amount_3[9],
                                    l_state[2],
                                    l_sub[2],
                                    l_period_at[1],
                                    l_dollar_sign_at[1],
                                    l_space_at[1],
                                    l_roof_type[2],
                                    l_claim_year[2],
                                    l_major_loss_found[2],
                                    l_installation_id[5],
                                    l_minor_loss_found[2],
                                    l_no_major_losses_found[2],
                                    l_no_minor_losses_found[2],
                                    l_year_built[4],
                                    l_construction[1],
                                    l_square_feet[5],
                                    l_swimming_pool[1],
                                    l_oil_heat[1],
                                    l_wood_stove[1],
                                    l_no_bathrooms[3]/dec=1,
                                    l_leed_certified[1],
                                    l_no_stories[1],
                                    l_restricted[1]=0,
                                    l_hurricane_deductible[5],
                                    l_new_home_discount_factor[4]=0/dec=3,
                                    l_ctr2[2],
                                    l_restricted_distance[5]=0/dec=2,
                                    l_lib7_pos[4],
                                    l_start_dir_pos[4],
                                    l_dont_get_credit_score[1],
                                    l_refused_credit_score[1],
                                    l_transunion_credit_score[4],
                                    l_val_zipcode[5],
                                    l_zipcode_5[5],
                                    l_agent_no[4],
                                    l_default_contents_limit[8],
                                    l_county[3],
                                    l_wind_deductible[5],
                                    l_protection[2],
                                    l_no_units[2],
                                    l_app_no[11],
                                    l_rating_territory[3],
                                    l_loop[4],
                                    l_exclude_terrorism[1]=0,
                                    l_prem_no[4]=0,
                                    l_group[2],
                                    l_table_1[2],
                                    l_binding_limit[8]=0,
                                    l_filed_limit[8]=0,
                                    l_dwelling_limit[8]=0,
                                    l_contents_limit[8]=0,
                                    l_no_years[4]=0,
                                    l_premium_1[8]=0/dec=4,
                                    l_premium_2[8]=0/dec=4,
                                    l_premium_3[8]=0/dec=4,
                                    l_premium_4[8]=0/dec=4,
                                    l_premium_5[8]=0/dec=4,
                                    l_premium_6[8]=0/dec=4,
                                    l_new_home_year[4]=0,
                                    l_new_year_2[2]=0,
                                    l_build_no[4]=0,
                                    l_off_premises_limit[8]=0,
                                    l_mcp140_limit[8],
                                    l_mm[2],
                                    l_yyyy[4],
                                    l_dd[2],
                                    l_territory[3],
                                    l_increase_cov_c[8]=0/dec=4,
                                    l_prior_limit[8],
                                    l_townhouse[1],
                                    l_limit[8],
                                    l_minimum_limit[8],
                                    l_maximum_limit[8],
                                    l_zipcode[9],
                                    l_zipcode1_1[1],
                                    l_zipcode1_2[1],
                                    l_zipcode1_3[1],
                                    l_zipcode1_4[1],
                                    l_zipcode1_5[1],
                                    l_table[1],
                                    l_nonowned_factor[5]=0/dec=3,
                                    l_no_families[1],
                                    l_building_minimum_limit[8],
                                    l_contents_minimum_limit[8],
                                    l_combined_minimum_limit[8],
                                    l_building_maximum_limit[8],
                                    l_contents_maximum_limit[8],
                                    l_combined_maximum_limit[8],
                                    l_building_binding_limit[8],
                                    l_contents_binding_limit[8],
                                    l_combined_binding_limit[8],
                                    l_plspreprinted_alarm_factor[4]=0/dec=3,
                                    l_fpl01_form[1],
                                    l_min_error[1],
                                    l_max_error[1],
                                    l_binding_error[1],
                                    l_combined_limit[8]=0,
                                    l_rating_territory_group_1[1],
                                    l_rating_territory_group_2[1],
                                    l_rating_territory_group_3[1],
                                    l_group_1[5]=0/dec=3,
                                    l_group_2[5]=0/dec=3,
                                    L_CLASS_CODE[5],
                                    l_restaurant[1],
                                    l_year[4],
                                    l_end_sequence[4],
                                    l_tier_1[2],
                                    L_PROPERTY_LIMIT[8]=0,
                                    l_property_limit_1[8]=0,
                                    L_LINE_OF_BUSINESS[2] ,
                                    L_AR_LIMIT[8],
                                    L_COMPUTER_LIMIT[8],
                                    l_csexec_number[12],
                                    l_abort_program[1],
                                    L_UTILITY_LIMIT[8],
                                    L_MECHANICAL_LIMIT[8],
                                    L_EXTERIOR_SIGNS_LIMIT[8],
                                    L_EMPLOYEE_LIMIT[8],
                                    L_GLASS_LIMIT[8],
                                    L_SEWER_LIMIT[8],
                                    L_VALUABLE_LIMIT[8],
                                    L_FORM[1] ,
                                    l_tier[2]=0,
                                    l_prior_address_less_then_x_years,
                                    l_same_as_agqname_address[1],
                                    l_ssn[9],
                                    l_days[2],
                                    l_Form_1[1] ;

        Local String L_DESC[50] ,
                     L_REINSURANCE[1] ,
                     l_payment_made[1]="N",
                     l_make_a_payment[1]="N",
                     l_billing_amount_1[9],
                     l_billing_amount_2[9],
                     l_billing_amount_4[9],
                     l_billing_amount_str[9],
                     l_ok_to_show[1]="Y",
                     l_hold_billing_amount[9],
                     l_str_state[2],
                     l_url[2000],
                     l_ip_address[17],
                     l_billing_name[200],
                     l_address[200],
                     l_city[50],
                     l_country,
                     l_str_policy_no,
                     l_amount,
                     l_occupation[50],
                     l_found[1],
                     l_continue[1],
                     l_construction_type[50],
                     l_heat_type[50],
                     l_roof_type_desc[50],
                     l_county_name[75],
                     l_claim_type[14],
                     l_first_name_1[15],
                     L_MACRO[15]="" ,
                     L_REPORT[15]="",
                     L_PARAMETER[20]="" ,
                     L_AR_COMMAND_LINE[55] ,
                     l_commandline_1[17],
                     l_sfs_code[3]="SFS",
                     l_email_address[50],
                     l_middle_initial_1[1],
                     l_last_name_1[25],
                     l_rating_group[1],
                     l_first_name_2[15],
                     l_middle_initial_2[1],
                     l_last_name_2[25],
                     i_middle_initial[1],
                     l_name_1[50],
                     l_name_2[50],
                     l_credit_score_file[12]= "credit_score",
                     l_claim_file[5]="claim",
                     l_property_file[8]="property",
                     l_credit_score_error_message[18] = "error_credit_score" ,
                     l_limit_wording[15],
                     l_claim_error_message[11]="error_claim",
                     l_property_error_message[14]="error_property",
                     l_credit_score[5],
                     l_claim[5],
                     l_property[5],
                     l_credit_error_message[300],
                     l_claims_error_message[300],
                     l_property_char_error_message[300],
                     l_which_protocol[40],
                     l_which_protocol_1[40],
                     l_current_path[2048],
                     l_current_environment[100],
                     l_designation[7],
                     l_apt_number[5],
                     l_street_direction[2],
                     l_house_number[10],
                     l_po_box[10],
                     l_name_3[50],
                     l_street_name[27],
                     l_street_type[6],
                     l_prior_house_number[10],
                     l_prior_street_direction[2],
                     l_prior_street_name[27],
                     l_prior_street_type[6],
                     l_prior_apt_number[5],
                     l_prior_designation[7],
                     l_prior_city[27],
                     l_prior_state[2],
                     l_prior_zip_code[10],
                     l_filed_message[100],
                     l_hurricane_code[7],
                     l_sub_line[2],
                     l_record_key[2],
                     l_owner_occupied[1],
                     l_updated[1],
                     l_zip_code_5[5],
                     l_mpl47[1],
                     l_agent_wording[9]="Agent No:",
                     l_current_web_page[55],
                     l_web_site_address[150],
                     l_server_name[100],
                     l_mpl49[1],
                     l_printers_credit_wording[23]="Printers Credit:",
                     l_total_printers_wording[23]="Total Printers:",
                     l_mho45[1],
                     l_mpl13[1],
                     l_first[1],
                     l_new_home_discount[1],
                     l_str_zipcode[9]="",
                     l_buyback_option_wording[23]="Buyback Option Charge:",
                     l_fungi_mold_wording[23]="Fungi/Mold Limitations:",
                     l_lob_code[10],
                     l_irpm_wording[12]="IRPM:",
                     l_enter[1],
                     l_minimum_message[200],
                     l_combined_minimum_message[200],
                     l_maximum_message[200],
                     l_combined_maximum_message[200],
                     l_binding_message[200],
                     l_combined_binding_message[200],
                     l_contact_message[200],
                     l_mp_wording[4]="M.P.",
                     l_continue_1[3]="",
                     l_continue_2[3]="",
                     l_continue_3[3]="",
                     l_dec[15]="",
                     l_app[3]="agq",
                     L_CODE[7],
                     L_CODE_1[7],
                     L_CODE_2[7],
                     L_CODE_3[7],
                     L_CODE_4[7],
                     L_CODE_5[7],
                     L_CODE_6[7],
                     L_CODE_7[7],
                     L_CODE_8[7],
                     l_code_9[7],
                     l_code_10[7],
                     l_code_11[7],
                     l_code_12[7],
                     l_code_13[7],
                     l_code_14[7],
                     l_code_15[7],
                     l_code_16[7],
                     l_code_17[7],
                     l_code_18[7],
                     l_code_19[7],
                     l_code_20[7],
                     l_code_21[7],
                     l_code_22[7],
                     l_code_23[7],
                     l_code_24[7],
                     l_code_25[7],
                     l_code_26[7],
                     l_code_27[7],
                     l_code_28[7],
                     l_code_29[7],
                     l_code_30[7],
                     l_code_31[7],
                     l_csexec_application[25],
                     l_processing_system[30],
                     l_rating_system[40],
                     l_continue_4[2],
                     l_territory_wording[10]="Territory:",
                     l_system_id[15],
                     L_SCREEN[15] ,
                     l_screen_1[9],
                     l_screen_2[10],
                     L_FORM_EDITION[18],
                     L_DESCRIPTION[55],
                     L_COMPUTER_DESC[50] ,
                     L_DELETE_NONOWNED_HIRED[1]="N",
                     L_ADD_ENDORSEMENT[1]="Y",
                     L_PROPERTY_LIMIT_CHANGE[1]="N",
                     l_sfqname_str[10],
                     L_COMPANY_ID[10],
                     l_business_owner_name[50],
                     l_tu_house_number[10],
                     l_tu_street_direction[2],
                     l_tu_street_name[27],
                     l_tu_street_type[6],
                     l_tu_apt_number[5],
                     l_tu_designation[7],
                     l_tu_mailing_city[27],
                     l_tu_mailing_state[2],
                     l_tu_mailing_zip_code[10],
                     l_sfqlocation_address[50];

        local wdate l_eff_date ,
                    l_sal_eff_date ;

        include "print.var"

        include "virtualdecs.var"

        include "sfscsexec.var"

        Access agqname,
           Set agqname:app_no = G_app_no, generic

        Include "stdkeys7.inc"

Style Definition
        Include "styles.inc"
        Displayonly Field Style {
                                  backgroundcolor="#CCCCCC"
                                }


Functions

        "redisplay" display/noreturn "agtmt612" ;

        "add" sequence "new"      tagged add_fn ;
        "new" add/hidden/autoupdate ;

        "change" sequence "chg"   tagged change_fn ;
        "chg" change/hidden/autoupdate ;

        "back" display/noreturn "agtmt001" tagged back_fn ;
         reaccess ;

        "nextscreen"     display/noreturn "agtmt613"  tagged nextscreen_fn ;
        "previousscreen" display/noreturn "agtmt611"  tagged previousscreen_fn ;

        include "stdfunc7b.inc"

EVENT DEFINITION
        default eventhandler {
                             "REMOVE_SCREEN" { function = "exit" abort () }
                             "reload" { function = "reaccess" abort () }
                             "display_message" { warning "" + event.value }
                             "current_line_of_business" {
                                                          g_line_of_business = val(event.value)
                                                        }
                             }
Menu Definition

Toolbar Definition

Screen Entry
access sfsdefault, set sfsdefault:sfs_code = "SFS", generic

disable(accept_fn)
g_initial_screen = ""
l_username = username
l_company_id = sfsdefault:company_id

access sfsemail,
   set sfsemail:company_id = l_company_id,
       sfsemail:user_id    = l_username, generic

access sfsagent,
   set sfsagent:company_id = l_company_id,
       sfsagent:agent_no   = sfsemail:agent_no, generic

l_state = sfsagent:state
access sfsline,
   set sfsline:company_id       = l_company_id,
       sfsline:line_of_business = g_line_of_business,
       sfsline:lob_subline      = "00", generic

switch(g_line_of_business)
  case 15 : setproperty(t_line_of_business,iconname,"title_com_auto_std.bmp")
  case 16 : setproperty(t_line_of_business,iconname,"title_com_auto_pref.bmp")
  default : setproperty(t_line_of_business,iconname,"")
  end

access sfsdefault, set sfsdefault:sfs_code = "SFS", generic

if sfsdefault:company_id one of "FLEMINGTON" then
    hide(farmers_fn)
else
if sfsdefault:company_id one of "FARMERS" then
    hide(ficof_fn)

if g_inquiry <> "Y" then
    g_inquiry = "N"

if l_company_id <> "FARMERS" then
    hide(farmers_fn)

access sfsemail, set sfsemail:company_id = l_company_id,
                     sfsemail:user_id    = l_username, generic

if agqname:quote_no <> 0 then
    begin
    disable(change_fn)
    disable(delete_fn)
    disable(accept_fn)
    end

access agqname_alias, set agqname_alias:app_no = g_app_no, generic

if agqname_alias:app_no = 0 then
    begin
    disable(change_fn)
    end
else
if agqname_alias:app_no <> 0 and
   agqname_alias:quote_no = 0 then
    begin
    enable(change_fn)
    end

access agqname, set agqname:app_no = g_app_no, generic

if agqname:quote_no <> 0 then
    begin
    disable(change_fn)
    disable(add_fn)
    disable(delete_fn)
    end

access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

if agqmailingaddress:app_no <> g_app_no then
    function = "CHANGE"

access validation
if agqname:app_no <> g_app_no then
    error 1000 ;

screen at 1,1 to 32,100
    Properties
          {
          Layouttype = screen
          transparent = False
          backgroundcolor = "#ADD8E6"
          scrollbarpolicy = always
          fontstyle = BOLD
          }
    {

    Panel at 1,1 to 2,100
        Properties
            {
            layouttype = screen
            }
        {
        components
            guidetext at 1,1 to 2,40
                properties
                    {
                    iconname = "qp_logo.gif"
                    }
            guidetext at 1,83 to 2,100 tagged ficof_fn
                properties
                    {
                    iconname = "ficof_logo.gif"
                    }
            guidetext at 1,80 to 2,100 tagged farmers_fn
                properties
                    {
                    iconname = "salem_logo.gif"
                    }
            guidetext at 1.30,40 tagged t_line_of_business
                Properties
                   {
                   iconname = ""
                   }
            }

panel at 3,1 to 4,100
    Properties
        {
        LayoutType = screen
        backgroundcolor = "Grey"
        transparent = False
        }
    {
    components
        guidetext at 1.45,1 to 1.45,40     tagged display_information_box
            properties
                {
                text = "Mailing and Location Information"
                fontsize = 18
                fontstyle = BOLD
                fontname = "arial"
                transparent = False
                backgroundcolor = "Grey"
                }

    }

Panel at 3.45,75 to 4.45, 100
    Properties
        {
        LayoutType = screen
        }
{
%%
App No: ___________

%%

fields
101     agqname:APP_NO/displayonly ;

}

Panel at 5,1 to 6,100 Tagged icon_line2_tg
Properties
        {
        LayoutType = screen
        }
{
Components

        Button at 1.5,10    tagged change_fn
        Properties {
                Iconname = "btn_edit_entries.bmp"
                }
        Events  {
                Action = change_fn
                }

        Button at 1.5,60 tagged accept_fn
          properties
            {
              Iconname = "btn_accept_edits.bmp"
            }
          Events  {
                    mouseclicked = accept
                  }
    }

Panel at 5,94 to 6,96 tagged button_panel
    Properties
        {
        layouttype = column
        }
    {
    Components
        Button to 1,1
            properties
                {
                Iconname = "btn_print_screen.bmp"
                }
            events
                {
                action
                    {
                    function = "print"
                    abort()
                    }
                }
    }

Panel at 6.45,91
    Properties
        {
        layouttype = column
        }
    {
    Components
        guidetext to 1,1
            properties
                {
                text = "agtmt612.sd"
                fontsize = 9
                }
    }

panel at 7,1 to 7,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

Panel at 8,1 to 26,100
{
%%
Business Name:     __________________________________________________
                   __________________________________________________
                   __________________________________________________
Number      Direction          Street              Type    Designation  Apt No.
__________  ___    ___________________________  ______  _______      _____
Address            __________________________________________________
                   __________________________________________________
                   __________________________________________________
City State Zip:    ______________________________  ____    __________
Phone No:          ________________
Business Owners home address Same as above:~~_        SSN: ____________
Business Owners First Name:    _______________  Last Name: _________________________
Number      Direction          Street              Type    Designation  Apt No.
__________  ___       ___________________________  _______  _______     _____
City State Zip:       ______________________________  ____  __________
Business Owners prior home address only if at current address less then 2 years:~~__
Number      Direction          Street              Type    Designation  Apt No.
__________  ___       ___________________________  _______  _______     _____
City State Zip:       ______________________________  ____  __________

%%

components

fields
101     begin
        if function one of "CHANGE", "CHG" then
            {
            l_prior_house_number     = ""
            l_prior_street_direction = ""
            l_prior_street_name      = ""
            l_prior_street_type      = ""
            l_prior_designation      = ""
            l_prior_apt_number       = ""
            l_prior_city             = ""
            l_prior_state            = ""
            l_prior_zip_code         = ""
            l_tu_house_number        = ""
            l_tu_street_direction    = ""
            l_tu_street_name         = ""
            l_tu_street_type         = ""
            l_tu_designation         = ""
            l_tu_apt_number          = ""
            l_tu_mailing_city        = ""
            l_tu_mailing_state       = ""
            l_tu_mailing_zip_code    = ""

            enable(accept_fn)
            disable(previousscreen_fn)
            disable(nextscreen_fn)
            disable(back_fn)
            }

        do parse_address_line(agqname:address[1])
        access agqmailingaddress, set agqmailingaddress:app_no = agqname:app_no, generic

        if agqmailingaddress:app_no = agqname:app_no then
            {
            l_tu_house_number                  = agqmailingaddress:house_number
            l_tu_street_direction              = agqmailingaddress:street_direction
            l_tu_street_name                   = agqmailingaddress:street_name

            access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id, generic
            l_tu_street_type = ""
            while sfsstrtype:errornumber <> 4026
                {
                if sfsstrtype:tu_ST_TYPE  = agqmailingaddress:street_type and
                   sfsstrtype:tu_st_type <> "" then
                    {
                    l_tu_street_type = sfsstrtype:st_type
                    }

                next sfsstrtype
                }

            l_tu_designation                   = agqmailingaddress:designation
            l_tu_apt_number                    = agqmailingaddress:apt_number
            l_tu_mailing_city                  = agqmailingaddress:mailing_city
            l_tu_mailing_state                 = agqmailingaddress:mailing_state
            l_tu_mailing_zip_code              = agqmailingaddress:mailing_zipcode
            l_prior_house_number               = agqmailingaddress:prior_house_number
            l_prior_street_direction           = agqmailingaddress:prior_street_direction
            l_prior_street_name                = agqmailingaddress:prior_street_name

            access SFSSTRTYPE, set SFSSTRTYPE:company_id = "", generic
            l_prior_street_type = ""
            while sfsstrtype:errornumber <> 4026 and
                  l_prior_street_type = ""
                {
                if sfsstrtype:tu_ST_TYPE  = agqmailingaddress:prior_street_type and
                   sfsstrtype:tu_st_type <> "" then
                    {
                    l_prior_street_type = sfsstrtype:st_type
                    }

                next sfsstrtype
                }

            l_prior_designation                = agqmailingaddress:prior_designation
            l_prior_apt_number                 = agqmailingaddress:prior_apt_number
            l_prior_city                       = agqmailingaddress:prior_city
            l_prior_state                      = agqmailingaddress:prior_state
            l_prior_zip_code                   = agqmailingaddress:prior_zip_code
            l_business_owner_name              = agqmailingaddress:business_owners_name
            l_first_name_1                     = agqmailingaddress:first_name_1
            l_last_name_1                      = agqmailingaddress:last_name_1
            l_prior_address_less_then_x_years  = agqmailingaddress:if_at_address_less_then_x_years
            l_same_as_agqname_address          = agqmailingaddress:same_as_sfqname_address
            }
        end
        agqNAME:NAME_KEY_1/upper/default/tabstop ;
201     agqNAME:NAME_KEY_2/upper/tabstop ;
301     agqNAME:NAME_KEY_3/uppercase/tabstop ;
501     l_house_number/default/tabstop ;
502     begin
        access sfsdirection_alias, set sfsdirection_alias:company_id = agqname:company_id, generic

        end
        l_street_direction/default/uppercase/tabstop
        access sfsdirection, set sfsdirection:company_id = agqname:company_id,
                                 sfsdirection:direction  = l_street_direction, generic

        If l_street_direction <> SFSDIRECTION:DIRECTION Then
            Error 1404

        Activehelp SFSDIRECTION_ALIAS:DIRECTION ,
                   SFSDIRECTION_ALIAS:DESCRIPTION;

503     l_street_name/uppercase/default/tabstop ;

504     begin
        access SFSSTRTYPE_alias, set SFSSTRTYPE_alias:company_id = agqname:company_id, generic

        end
        l_street_type/default/uppercase/tabstop
        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:st_type    = l_street_type, generic

        If l_street_type <> SFSSTRTYPE:ST_TYPE Then
            Error 1307

        Activehelp SFSSTRTYPE_alias:ST_TYPE,
                   SFSSTRTYPE_alias:DESCRIPTION ;
505     begin
        access SFSdesignation_alias, set SFSdesignation_alias:company_id = agqname:company_id, generic

        end
        l_designation/default/uppercase/tabstop
        access SFSdesignation, set SFSdesignation:company_id  = agqname:company_id,
                                   sfsdesignation:designation = l_designation, generic

        If l_designation <> SFSdesignation:designation Then
            Error 1307

        activehelp sfsdesignation_alias:designation,
                   sfsdesignation_alias:description;
506     l_apt_number/default/uppercase/tabstop;
601     begin
        if FUNCTION = "CHG" or
           function = "CHANGE" then
            {
            agqname:address[1] = ""
            if Trun(l_house_number) <> "" then
                agqname:address[1] = trun(agqname:address[1]) + Trun(l_house_number)

            if Trun(l_street_direction) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(SFSDIRECTION:description)

            if Trun(l_street_name) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(l_street_name)

            if Trun(l_street_type) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(SFSSTRTYPE:description)

            if Trun(l_designation) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(l_designation)

            if trun(l_apt_number) <> "" then
                agqname:address[1] = trun(agqname:address[1]) + " " + l_apt_number
            }
        end
        agqNAME:ADDRESS[1]/default/tabstop ;
701     agqNAME:ADDRESS[2]/tabstop;
801     agqNAME:ADDRESS[3]/tabstop;
901     agqname:city/uppercase/tabstop;
902     Begin
        If FUNCTION one of "CHANGE", "CHG" and
           setup_time = 0 or
           setup_date = 0 Then
            Begin
            agqNAME:SETUP_USER = USERNAME
            agqNAME:SETUP_TIME = SYSTEMTIME
            agqNAME:SETUP_DATE = SYSTEMDATE
            agqNAME:STR_STATE  = SFSSTATECODE_ALIAS:STATE_STR
            if sfscompany:boiler_rating = 4 then
                agqname:str_state = "NJ"
            if SFSEMAIL:AGENT_NO <> 0 then
                agqname:quoted_by_agent = 1
            else
                agqname:quoted_by_agent = 0
            End
        End
        agqNAME:STR_STATE/default/uppercase/tabstop ;
903     agqNAME:STR_ZIPCODE/default/tabstop
        if val(agqname:str_zipcode) = 0 then
            error "Please enter only numbers"

        if len(trun(agqNAME:STR_ZIPCODE)) <> 5 and
           len(trun(agqNAME:STR_ZIPCODE)) <> 9 then
            error "Length of Zipcode must 5 or 9 characters"

        if val(agqname:str_zipcode) <> 0 and
           agqNAME:STR_ZIPCODE[6,9] = "" Then
            agqNAME:STR_ZIPCODE[6,9] = "0000"

        putfield(agqNAME:STR_ZIPCODE);
1001    agqNAME:TELEPHONE/tabstop;
1101    l_same_as_agqname_address/checkbox/values="0,1"/default/tabstop;
1102    l_ssn/tabstop/default ;
1102    str(l_ssn[6,9])/displayonly/mask="***-**-9999"
        access agqcreditscore, set agqcreditscore:app_no = g_app_no, generic

        if agqcreditscore:app_no = g_app_no then
            begin
            change agqcreditscore
                begin
                agqcreditscore:ssn = l_ssn
                end
            end
        else
            begin
            add agqcreditscore
                begin
                agqcreditscore:app_no = g_app_no
                agqcreditscore:ssn    = l_ssn
                end
            end ;
1201    BEGIN
        if l_same_as_agqname_address = 1 then
            begin
            l_tu_house_number      = l_house_number
            l_tu_street_direction  = l_street_direction
            l_tu_street_name       = l_street_name
            l_tu_street_type       = l_street_type
            l_tu_designation       = l_designation
            l_tu_apt_number        = l_apt_number
            l_tu_mailing_city      = agqname:city
            l_tu_mailing_state     = agqname:str_state
            l_tu_mailing_ZIP_code  = agqNAME:STR_ZIPCODE
            END
        end
        l_first_name_1/uppercase/default/tabstop;
1202    l_last_name_1/uppercase/default/tabstop ;
1401    l_tu_house_number/default/tabstop;
1402    begin
        access sfsdirection_alias, set sfsdirection_alias:company_id = agqname:company_id, generic

        end
        l_tu_street_direction/default/uppercase/tabstop
        access sfsdirection, set sfsdirection:company_id = agqname:company_id,
                                 sfsdirection:direction  = l_tu_street_direction, generic

        If l_tu_street_direction <> SFSDIRECTION:DIRECTION Then
            Error 1404

        Activehelp SFSDIRECTION_ALIAS:DIRECTION ,
                   SFSDIRECTION_ALIAS:DESCRIPTION;
1403    l_tu_street_name/default/uppercase/tabstop   ;
1404    begin
        access SFSSTRTYPE_alias, set SFSSTRTYPE_alias:company_id = agqname:company_id, generic

        end
        l_tu_street_type/default/uppercase/tabstop
        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:st_type    = l_tu_street_type, generic

        If l_tu_street_type <> SFSSTRTYPE:ST_TYPE Then
            Error 1307

        Activehelp SFSSTRTYPE_alias:ST_TYPE,
                   SFSSTRTYPE_alias:DESCRIPTION ;
1405    begin
        access SFSdesignation_alias, set SFSdesignation_alias:company_id = agqname:company_id, generic

        end
        l_tu_designation/uppercase/default/tabstop
        access SFSdesignation, set SFSdesignation:company_id  = agqname:company_id,
                                   sfsdesignation:designation = l_tu_designation, generic

        If l_tu_designation <> SFSdesignation:designation Then
            Error 1307

        activehelp sfsdesignation_alias:designation,
                   sfsdesignation_alias:description;
1406    l_tu_apt_number/uppercase/DEFAULT/tabstop;
1501    l_tu_mailing_city/UPPERCASE/default/tabstop;
1502    l_tu_mailing_state/UPPERCASE/default/tabstop;
1503    l_tu_mailing_zip_code/UPPERCASE/default/mask="99999-9999"/tabstop
        if val(l_tu_mailing_zip_code) = 0 then
            error "Please enter only numbers"

        if len(trun(l_tu_mailing_zip_code)) <> 5 and
           len(trun(l_tu_mailing_zip_code)) <> 9 then
            error "Length of Zipcode must 5 or 9 characters"

        if val(l_tu_mailing_zip_code[6,9]) = 0 and
           trun(l_tu_mailing_zip_code[6,9]) = "" Then
            l_tu_mailing_zip_code[6,9] = "0000"

        putfield(l_tu_mailing_zip_code);
1601    l_prior_address_less_then_x_years/checkbox/values="0,1"/default/tabstop
        if agqname:ADDRESS_SAME = "1" then
            {
            access agqlocation, set agqlocation:app_no = agqname:app_no, generic

            l_sfqlocation_address = ""
            if Trun(l_tu_house_number) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address) + Trun(l_tu_house_number)

            if Trun(l_street_direction) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address)  + " " + Trun(SFSDIRECTION:description)

            if Trun(l_tu_street_name) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address)  + " " + Trun(l_tu_street_name)

            if Trun(l_tu_street_type) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address)  + " " + Trun(l_tu_street_type)

            if Trun(l_tu_designation) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address)  + " " + Trun(l_tu_designation)

            if trun(l_tu_apt_number) <> "" then
                l_sfqlocation_address = trun(l_sfqlocation_address) + " " + l_tu_apt_number

            if agqlocation:app_no = agqname:app_No then
                {
                change agqlocation
                    {
                    agqlocation:st_number    = val(l_tu_house_number)
                    agqlocation:st_direction = l_tu_street_direction
                    agqlocation:street       = l_tu_street_name
                    agqlocation:st_type      = l_tu_street_type
                    agqlocation:designation  = l_tu_designation
                    agqlocation:apt_NUMBER   = l_tu_apt_number
                    agqlocation:CITY         = l_tu_mailing_city
                    agqlocation:str_STATE    = l_tu_mailing_state
                    agqlocation:str_ZIPCODE  = l_tu_mailing_zip_code
                    agqlocation:address      = l_sfqlocation_address
                   }
                }
            else
                {
                l_prem_no  = 1
                l_build_no = 1
                add agqlocation
                    {
                    agqlocation:app_no       = agqname:app_no
                    agqlocation:prem_no      = l_prem_no
                    agqlocation:build_no     = l_build_no
                    agqlocation:st_number    = val(l_tu_house_number)
                    agqlocation:st_direction = l_tu_street_direction
                    agqlocation:street       = l_tu_street_name
                    agqlocation:st_type      = l_tu_street_type
                    agqlocation:designation  = l_tu_designation
                    agqlocation:apt_NUMBER   = l_tu_apt_number
                    agqlocation:CITY         = l_tu_mailing_city
                    agqlocation:str_STATE    = l_tu_mailing_state
                    agqlocation:str_ZIPCODE  = l_tu_mailing_zip_code
                    agqlocation:address      = l_sfqlocation_address
                    }
                }
            }
        if l_prior_address_less_then_x_years = 0 then
            {
            l_prior_house_number     = ""
            l_prior_street_direction = ""
            l_prior_street_name      = ""
            l_prior_street_type      = ""
            l_prior_designation      = ""
            l_prior_apt_number       = ""
            l_prior_city             = ""
            l_prior_state            = ""
            l_prior_zip_code         = ""
            if agqcreditscore:refused_credit_score <> 1 then
                do call_web_service
            else
                do write_agqmailingaddress
            };
1801    l_prior_house_number/default/uppercase/tabstop
        hide if l_prior_address_less_then_x_years = 0;
1802    begin
        access sfsdirection_alias, set sfsdirection_alias:company_id = agqname:company_id, generic

        end
        l_prior_street_direction/default/uppercase/tabstop
        hide if l_prior_address_less_then_x_years = 0
        access sfsdirection, set sfsdirection:company_id = agqname:company_id,
                                 sfsdirection:direction  = l_prior_street_direction, generic

        If l_prior_street_direction <> SFSDIRECTION:DIRECTION Then
            Error 1404

        Activehelp SFSDIRECTION_ALIAS:DIRECTION ,
                   SFSDIRECTION_ALIAS:DESCRIPTION;

1803    l_prior_street_name/uppercase/tabstop
        hide if l_prior_address_less_then_x_years = 0;
1804    begin
        access SFSSTRTYPE_alias, set SFSSTRTYPE_alias:company_id = agqname:company_id, generic

        end
        l_prior_street_type/default/uppercase/tabstop
        hide if l_prior_address_less_then_x_years = 0
        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:st_type    = l_prior_street_type, generic

        If l_prior_street_type <> SFSSTRTYPE:ST_TYPE Then
            Error 1307

        Activehelp SFSSTRTYPE_alias:ST_TYPE,
                   SFSSTRTYPE_alias:DESCRIPTION ;
1805    begin
        access SFSdesignation_alias, set SFSdesignation_alias:company_id = agqname:company_id, generic

        end
        l_prior_designation/uppercase/default/tabstop
        hide if l_prior_address_less_then_x_years = 0
        access SFSdesignation, set SFSdesignation:company_id  = agqname:company_id,
                                   sfsdesignation:designation = l_prior_designation, generic

        If l_prior_designation <> SFSdesignation:designation Then
            Error 1307

        activehelp sfsdesignation_alias:designation,
                   sfsdesignation_alias:description;
1806    l_prior_apt_number/uppercase/default/tabstop
        hide if l_prior_address_less_then_x_years = 0;
1901    l_prior_city/uppercase/default/tabstop
        hide if l_prior_address_less_then_x_years = 0;
1902    l_prior_state/uppercase/default/tabstop
        hide if l_prior_address_less_then_x_years = 0;
1903    l_prior_zip_code/uppercase/default/mask="99999-9999"/tabstop
        hide if l_prior_address_less_then_x_years = 0
        hide if l_prior_address_less_then_x_years = 0
        if val(l_tu_mailing_zip_code) = 0 then
            error "Please enter only numbers"

        if len(trun(l_prior_zip_code)) <> 5 and
           len(trun(l_prior_zip_code)) <> 9 then
            error "Length of Zipcode must 5 or 9 characters"

        If val(l_prior_zip_code[6,9]) = 0 and
           trun(l_prior_zip_code[6,9]) = "" then
            l_prior_zip_code[6,9] = "0000"

        putfield(l_prior_zip_code)
        if l_prior_address_less_then_x_years = 1 then
            begin
            if agqcreditscore:refused_credit_score <> 1 then
               do call_web_service
            else
                do write_agqmailingaddress
            end ;

}

panel at 27,1 to 27,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

Panel at 28,1 to 28,100 Tagged icon_line2_tg
Properties
        {
        LayoutType = screen
        }
{
Components

        Button at 1,5  tagged previousscreen_fn
        Properties {
                Iconname = "previous_screen.bmp"
                }
        Events  {
                Action {
                       function = "previousscreen"
                       abort()
                       }
                }

        Button at 1,37   tagged back_fn
        Properties {
                Iconname = "btn_back_to_main_screen.bmp"
                }
        Events  {
                Action {
                          l_continue_2 = dialog("EXITING","warning.bmp","You are about to leave the application, Do you wish to continue","Yes","No")
                          if l_continue_2 = "Yes" then
                              begin
                              function = "back"
                              abort()
                              end
                       }
                }

        Button at 1,75   tagged nextscreen_fn
            Properties
                {
                Iconname = "next_screen.bmp"
                }
            Events
                {
                Action
                    {
                    function = "nextscreen"
                    abort()
                    }
                }

}

panel at 29,1 to 29,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

}

Update
if UPDATEOK = "NO" Then
    {
    enable(back_fn)
    enable(previousscreen_fn)
    enable(nextscreen_fn)
    disable(accept_fn)
    access agqname_alias, set agqname_alias:app_no = g_app_no, generic

    if agqname_alias:app_no <> 0 and
       agqname_alias:quote_no = 0 then
        begin
        enable(change_fn)
        end
    else
    if agqname_alias:app_no = 0 then
        begin
        disable(change_fn)
        end

    }

If UPDATEOK = "YES" And
   Abort = "NO" Then
    Begin
    enable(previousscreen_fn)
    enable(nextscreen_fn)

/*    access agqstatus, set agqstatus:app_no = g_app_no, generic

    if agqstatus:app_no <> g_app_no then
        begin
        access agsstatus, set agsstatus:company_id  = agqname:company_id,
                              agsstatus:status_code = 1, generic

        add agqstatus
            begin
            agqstatus:app_no             = g_app_no
            agqstatus:insured_name       = l_name_1
            agqstatus:trans_date         = todaysdate
            agqstatus:status_code        = 1
            agqstatus:status_description = agsstatus:description
            agqstatus:agent_no           = agqpersonal:agent_no
            agqstatus:company_id         = agqpersonal:company_id/raw
            end
        end

    access agqstatusnotes, set agqstatusnotes:app_no = g_app_no, generic

    if agqstatusnotes:app_no <> g_app_no then
        begin
        add agqstatusnotes
            begin
            agqstatusnotes:app_no             = g_app_no
            agqstatusnotes:trans_date         = todaysdate
            agqstatusnotes:sub_code           = 10
            agqstatusnotes:notes              = "Agent has started quote"
            agqstatusnotes:note_created_by    = "agtmt612"
            agqstatusnotes:status_code        = 1
            end
        end*/

    enable(back_fn)
    access agqname_alias, set agqname_alias:app_no = g_app_no, generic

    if agqname_alias:app_no <> 0 and
       agqname_alias:quote_no = 0 then
        begin
        enable(change_fn)
        end
    else
    if agqname_alias:app_no = 0 then
        begin
        disable(change_fn)
        end
    disable(accept_fn)

    function = "redisplay"
    end

Procedure Definition

procedure update_agqlocation
begin
access agqlocation, set agqlocation:app_no = g_app_no, generic

if agqlocation:app_no = g_app_no then
    begin
    change agqlocation
        begin
        agqlocation:st_number_str        = l_house_number
        agqlocation:st_direction         = l_street_direction
        agqlocation:street               = l_street_name
        agqlocation:st_type              = l_street_type
        agqlocation:designation          = l_designation
        agqlocation:apt_number           = l_apt_number
        agqlocation:address              = agqname:address[1]
        agqlocation:address1[1]          = agqname:address[2]
        agqlocation:city                 = agqname:city
        agqlocation:str_state            = agqname:str_state
        agqlocation:str_zipcode          = agqname:str_zipcode
        agqlocation:line_of_business     = agqname:line_of_business
        agqlocation:trans_date           = agqname:trans_date
        agqlocation:eff_date             = agqname:eff_date
        agqlocation:exp_date             = agqname:exp_date
        end
    end
else
    begin
    add agqlocation
        begin
        agqlocation:app_no               = agqname:app_no
        agqlocation:prem_no              = 1
        agqlocation:build_no             = 1
        agqlocation:sub_code             = 10
        agqlocation:st_number_str        = l_house_number
        agqlocation:st_direction         = l_street_direction
        agqlocation:street               = l_street_name
        agqlocation:st_type              = l_street_type
        agqlocation:address              = agqname:address[1]
        agqlocation:address1[1]          = agqname:address[2]
        agqlocation:city                 = agqname:city
        agqlocation:str_state            = agqname:str_state
        agqlocation:str_zipcode          = agqname:str_zipcode
        agqlocation:line_of_business     = agqname:line_of_business
        agqlocation:trans_date           = agqname:trans_date
        agqlocation:eff_date             = agqname:eff_date
        agqlocation:exp_date             = agqname:exp_date
        end
    end

end

procedure change_agqname
begin
if l_last_name_1 = l_last_name_2 then
    begin
    l_name_2 = ""
    if l_middle_initial_1 <> "" and
       l_middle_initial_2 <> "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " " +
                   trun(l_middle_initial_1) +
                   " & " +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_middle_initial_1 <> "" and
       l_middle_initial_2 = "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " " +
                   trun(l_middle_initial_1) +
                   " & " +
                   trun(l_first_name_2)
        end
    else
    if l_middle_initial_1 = "" and
       l_middle_initial_2 <> "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " & " +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_middle_initial_1 = "" and
       l_middle_initial_2 = "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " & " +
                   trun(l_first_name_2)
        end
    end
else
if l_last_name_1 <> l_last_name_2 then
    begin
    l_name_1 = trun(l_last_name_1) +
               "=" +
               trun(l_first_name_1) +
               " " +
               trun(l_middle_initial_1)
    if l_last_name_2 <> "" then
        begin
        l_name_2 = trun(l_last_name_2) +
                   "=" +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_last_name_2 = "" then
        begin
        l_name_2 = ""
        end
    end

agqname:name[1] = l_name_1
agqname:name[2] = l_name_2
if agqname:name[2] = "" and
   l_name_3 <> "" then
    agqname:name[2] = l_name_3
else
if agqname:name[2] <> "" and
   l_name_3 <> "" then
    agqname:name[3] = l_name_3

end

procedure call_web_service
BEGIN
unsigned ascii number l_ready_for_credit_check[2];
l_ready_for_credit_check = 0

do write_agqmailingaddress
do check_environment   --sets up the varible l_which_protocol
do fill_in_iix_transunion_score
access agqcreditscore, set agqcreditscore:app_no = agqname:app_no, exact

l_ready_for_credit_check = check_required_fields_for_credit_Score()
if l_ready_for_credit_check <> 0 then
    begin
/*    switch (l_ready_for_credit_check)
      case 1 : warning "Missing Last Name Default credit score will be given"
      case 2 : warning "Missing First Name Default credit score will be given"
      case 3 : warning "Missing House Number If NONE put in the number one"
      case 4 : warning "Missing Street Name Default Credit Score will be given"
      case 5 : warning "Missing City Name Default Credit Score will be given"
      case 6 : warning "Missing State Name Default Credit Score will be given"
      case 7 : warning "Missing Zip Code Default Credit Score will be given"
      end*/
    end
else
if agqname:company_id = "FARMERS" and
   agqcreditscore:CREDIT_SCORE = 0 and
   agqcreditscore:DATE_CREDIT_SCORED_RECEIVED = 0000.00.00 then
    begin
    do check_environment
    if sfscompany:debug_mode = 0 then
        {
        Proc("cli csbatch %s %s%s","webservice_agent",str(g_app_no,"99999999999"),l_which_protocol)/noconsole/background
        }
    else
        {
        Proc("cli csbatch %s %s%s","webservice_agent",str(g_app_no,"99999999999"),l_which_protocol)
        }
    message ("Processing . . . Please continue with quote")

    if agqcreditscore:app_no = agqname:app_no and
       agqcreditscore:credit_score <> 0 then
        message ("                                           ")
    end

END

procedure check_environment
BEGIN
string l_servername[20];
string l_servername_and_path[40];
unsigned ascii number l_loop = 0;

l_current_path = currentsea
l_lib7_pos     = pos(":lib7",l_current_path) - 1

if l_lib7_pos > 0 then
    {
    l_start_dir_pos = l_lib7_pos
    while l_start_dir_pos > 0 and
          l_current_path[l_start_dir_pos] <> ":"
        {
        l_start_dir_pos = l_start_dir_pos - 1
        }

    l_current_environment = l_current_path[l_start_dir_pos + 1,l_lib7_pos]      --the + moves over the : the lines assigned the directory
    }

l_servername = HOSTNAME
l_servername_and_path = trun(l_servername) + ":" + trun(l_current_environment)

switch (l_servername_and_path)
  case "linux02:farmers" : l_which_protocol = "CREDIT_SCORE_LIVE"   --make sure they are on live system only and
  default                : l_which_protocol = "CREDIT_SCORE_TEST"
  end

END

procedure Parse_address_line(string p_address)
BEGIN
Array [9] of string l_address_parts[27] ;
local unsigned ascii number l_loop[2];
local unsigned ascii number l_loop1[2];
local unsigned ascii number l_loop2[2];
local unsigned ascii number l_loop5[2];
local unsigned ascii number l_save_loop[2];
local unsigned ascii number l_save1_loop[2];
local unsigned ascii number l_first_time[1];
local string l_trimmed_address[50];
local unsigned ascii number l_found_space[1];

l_found_space             = 0
l_loop                    = 1
l_loop1                   = 1
l_loop5                   = 1
l_house_number            = ""
l_street_direction        = ""
l_street_type             = ""
l_designation             = ""
l_apt_number              = ""
l_street_name             = ""
l_same_as_agqname_address = 0

while l_loop <= len(trun(p_address))
    {
    if p_address[l_loop] = " " and
       l_loop = 1 then                            --do not copy string to the trimmed_address
        {
        --do nothing skip coping the string to the new string  leading space need to be removed
        }
    else
    if p_address[l_loop] = " " and
       l_found_space = 0 then
        {
        l_trimmed_address[l_loop1] = p_address[l_loop]
        l_found_space = 1
        l_loop1 = l_loop1 + 1
        }
    else
    if p_address[l_loop] <> " " then
        {
        l_trimmed_address[l_loop1] = p_address[l_loop]
        l_found_space = 0
        l_loop1 = l_loop1 + 1
        }

    l_loop = l_loop + 1
    }

l_loop = 1
while l_loop <= 9
    {
    l_address_parts[l_loop] = subfield(l_trimmed_address," ",l_loop)
    l_loop = l_loop + 1
    }

l_loop5 = 1
while l_loop5 <= 9 and
      trun(l_address_parts[l_loop5]) <> ""
    {
    l_loop5 = l_loop5 + 1
    }

l_loop = 10    --start out one higher to the l_loop will be at the correct spot
               --I need to check if there is a PO BOX first and put it in the street name

if agqname:address[1] = @"[P] [. O] [A-Z 0-9.# ]*" and      --FIRST ATTEMP OF PATTERN MATCHING.
   pos("BOX",agqname:address[1]) > 0 then
    {
    l_loop = 1
    l_first_time = 0
    while l_loop < l_loop5
        {
        if l_first_time = 0 then
            {
            l_first_time = 1
            L_street_name = trun(l_street_name) + l_address_parts[l_loop]
            }
        else
            {
            L_street_name = trun(l_street_name) + " " + l_address_parts[l_loop]
            }

        l_loop = l_loop + 1
        }
    }
else
    {
    l_street_type = ""
    while L_loop > 1 and
          l_street_type = ""
        {
        l_loop = l_loop - 1
        if trun(l_address_parts[l_loop]) <> "" then
            {
            do parse_street_type(l_address_parts[l_loop])
            }
        }

    if trun(l_street_type) = "" then
        {    --now I need to start from the begining.
        l_loop = 1
        if uppercase(trun(l_address_parts[l_loop])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                           "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {
            do parse_street_direction(l_address_parts[l_loop])
            }
        else
            {
            l_house_number = l_address_parts[l_loop]    --assuming the house number is first.
            }

        l_loop = l_loop + 1
        if uppercase(trun(l_address_parts[l_loop])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                           "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {   --now I need to find the street direction if it is there
            do parse_street_direction(l_address_parts[l_loop])
            }
        else
            {
            l_street_name = l_address_parts[l_loop]
            }

        l_loop = l_loop + 1
        if l_street_name <> "" then
            {
            do parse_designation(l_address_parts[l_loop])   --check for designation like street apt, floor
            l_loop = l_loop + 1
            if l_loop5 > l_loop then      --l_loop5 is the last position that has a value is l_loop5 so the rest goes to the apt number
                {
                l_first_time = 0
                while L_loop <= L_loop5
                    {
                    if l_first_time = 0 then
                        {
                        l_apt_number = TRun(l_apt_number) + l_address_parts[l_loop]
                        l_first_time = 1
                        }
                    else
                        {
                        l_apt_number = TRun(l_apt_number) + " " + l_address_parts[l_loop]
                        }
                    L_loop = L_loop + 1
                    }
                }
            }
        else
            {
            l_street_name = l_address_parts[l_loop]
            l_loop = l_loop + 1
            do parse_designation(l_address_parts[l_loop])   --check for designation like street apt, floor
            l_loop = l_loop + 1
            if l_loop5 > l_loop then      --l_loop5 is the last position that has a value is l_loop5 so the rest goes to the apt number
                {
                l_first_time = 0
                while L_loop <= L_loop5
                    {
                    if l_first_time = 0 then
                        {
                        l_apt_number = TRun(l_apt_number) + l_address_parts[l_loop]
                        l_first_time = 1
                        }
                    else
                        {
                        l_apt_number = TRun(l_apt_number) + " " + l_address_parts[l_loop]
                        }
                    L_loop = L_loop + 1
                    }
                }
            }
        }
    else                                                 ---if the street type is entered.
        {
        l_save_loop = l_loop   --save location in string of address so I can only search before that loop
        l_loop = l_loop5       --start at last position where there was a string value.

        while l_loop > l_save_loop and
              trun(l_designation) = ""
            {
            l_loop = l_loop - 1
            if trun(l_address_parts[l_loop]) <> "" then
                {
                do parse_designation(l_address_parts[l_loop])   --check for designation like street apt floor
                }
            }

        if l_designation <> "" then
            {
            l_save1_loop = l_loop + 1    --this will be the location of the apt
            }

        if trun(l_designation) <> "" then
            {
            if l_save1_loop < l_Loop5 then             --if this is not true then no apt number enter
                {
                l_loop = l_save1_loop            -- the + 1 is to skip over the designation
                                                -- check for apt number this will get me to the location of apt if it exists
                while l_loop <= l_loop5
                    {
                    if UPPERCASE(l_address_parts[l_loop]) <> "" then
                        {
                        l_apt_number = trun(l_apt_number) + trun(l_address_parts[l_loop])
                        }

                    l_loop = l_loop + 1
                    }
                }
            }
        else  -- no apt# floor or suite which is designation
            {
            if l_save_loop + 1 <= l_loop5 then
                {
                l_loop = l_save_loop + 1
                while l_loop <= l_loop5
                    {
                    if UPPERCASE(l_address_parts[l_loop]) <> "" then
                        {
                        l_apt_number = trun(l_apt_number) + trun(l_address_parts[l_loop])
                        }

                    l_loop = l_loop + 1
                    }
                }
            }

        l_loop         = l_save_loop  --at location of what I need to process. anything greater then this loop has been processed.
        l_loop2        = 1
        l_house_number = l_address_parts[l_loop2]   --assumes the first thing in the address is the house number
        l_loop2        = l_loop2 + 1     --currently at the second position in array of string

        l_street_direction = ""
        if uppercase(trun(l_address_parts[l_loop2])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                            "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {
            access sfsdirection,
              set sfsdirection:company_id = agqname:company_id, generic

            while sfsdirection:company_id = agqname:company_id
                {
                if trun(sfsdirection:description) = l_address_parts[l_loop2] or
                   trun(sfsdirection:direction)   = l_address_parts[l_loop2] then
                    {
                    l_street_direction = sfsdirection:direction
                    }

                next sfsdirection
                }

            l_loop2 = l_loop2 + 1   --at third location
            l_first_time = 1
            l_street_name = ""
            while l_loop2 < l_loop    --l_loop2 is starting from left and l_loop has already got the apt number and street type
                {
                if l_first_time = 1 then
                    {
                    l_first_time = 0
                    l_street_name = trun(l_street_name) + l_address_parts[l_loop2]
                    }
                else
                    {
                    l_street_name = trun(l_street_name) + " " + l_address_parts[l_loop2]
                    }

                l_loop2 = l_loop2 + 1
                }
            }
        else
            {
            l_first_time = 1
            l_street_name = ""
            while l_loop2 < l_loop    --l_loop2 is starting from left and l_loop has already got the apt number and street type
                {
                if l_first_time = 1 then
                    {
                    l_first_time = 0
                    l_street_name = trun(l_street_name) + l_address_parts[l_loop2]
                    }
                else
                    {
                    l_street_name = trun(l_street_name) + " " + l_address_parts[l_loop2]
                    }

                l_loop2 = l_loop2 + 1
                }
            }
        }
    }

END

procedure parse_street_type(string p_street_direction)
BEGIN
access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id, generic

while sfsstrtype:company_id = agqname:company_id and
      l_street_type = ""
    {
    if trun(p_street_direction) = sfsstrtype:st_type or
       trun(p_street_direction) = sfsstrtype:description then
        {
        l_street_type = sfsstrtype:st_type
        }

    next sfsstrtype
    }

END

procedure parse_street_direction(string p_direction)
BEGIN
l_street_direction = ""
if uppercase(trun(p_direction)) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                       "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
    {
    access sfsdirection, set sfsdirection:company_id = agqname:company_id, generic

    while sfsdirection:company_id = agqname:company_id
        {
        if trun(sfsdirection:description) = p_direction or
           trun(sfsdirection:direction)   = p_direction then
            {
            l_street_direction = sfsdirection:direction
            }

        next sfsdirection
        }
    }

END

Procedure parse_designation(string p_designation)
BEGIN
access sfsdesignation, set sfsdesignation:company_id = agqname:company_id, generic

while sfsdesignation:company_id = agqname:company_id and
      l_designation = ""
    {
    if trun(p_designation) = trun(sfsdesignation:designation) then
        {
        l_designation = sfsdesignation:designation
        }

    next sfsdesignation
    }

END

procedure write_agqmailingaddress
BEGIN
access agqmailingaddress, set agqmailingaddress:app_no = agqname:app_no, exact

if agqmailingaddress:app_no = agqname:app_no then
    begin
    change agqmailingaddress
        {
        agqmailingaddress:app_no                          = agqname:app_no
        agqmailingaddress:house_number                    = l_house_number
        agqmailingaddress:street_direction                = l_street_direction
        agqmailingaddress:street_name                     = l_street_name

        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:ST_TYPE    = l_street_type, generic

        agqmailingaddress:street_type                     = sfsstrtype:tu_st_type    --used because tu_st_type is only two positions
        agqmailingaddress:designation                     = l_designation
        agqmailingaddress:apt_number                      = l_apt_number
        agqmailingaddress:mailing_city                    = agqname:city
        agqmailingaddress:mailing_state                   = agqname:str_state
        agqmailingaddress:mailing_zipcode                 = agqname:str_zipcode
        agqmailingaddress:business_owners_name            = l_business_owner_name
        agqmailingaddress:if_at_address_less_then_x_years = l_prior_address_less_then_x_years
        agqmailingaddress:same_as_sfqname_address         = l_same_as_agqname_address
        agqmailingaddress:last_name_1                     = l_last_name_1
        agqmailingaddress:first_name_1                    = l_first_name_1
        agqmailingaddress:middle_initial_1                = l_middle_initial_1
        agqmailingaddress:last_name_2                     = l_last_name_2
        agqmailingaddress:first_name_2                    = l_first_name_2
        agqmailingaddress:middle_initial_2                = l_middle_initial_2
        agqmailingaddress:name_3                          = l_name_3
        agqmailingaddress:po_box                          = l_po_box
        agqmailingaddress:email_address                   = l_email_address
        agqmailingaddress:prior_designation               = l_prior_designation
        agqmailingaddress:prior_apt_number                = l_prior_apt_number
        agqmailingaddress:prior_city                      = l_prior_city
        agqmailingaddress:prior_state                     = l_prior_state
        agqmailingaddress:prior_zip_code                  = l_prior_zip_code
        }
    END
else
if agqmailingaddress:app_no <> agqname:app_no then
    BEGIN
    add agqmailingaddress
        {
        agqmailingaddress:app_no                          = agqname:app_no
        agqmailingaddress:house_number                    = l_house_number
        agqmailingaddress:street_direction                = l_street_direction
        agqmailingaddress:street_name                     = l_street_name

        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:ST_TYPE    = l_street_type, generic

        agqmailingaddress:street_type                     = sfsstrtype:tu_st_type
        agqmailingaddress:designation                     = l_designation
        agqmailingaddress:apt_number                      = l_apt_number
        agqmailingaddress:mailing_city                    = agqname:city
        agqmailingaddress:mailing_state                   = agqname:str_state
        agqmailingaddress:mailing_zipcode                 = agqname:str_zipcode
        agqmailingaddress:business_owners_name            = l_business_owner_name
        agqmailingaddress:if_at_address_less_then_x_years = l_prior_address_less_then_x_years
        agqmailingaddress:same_as_sfqname_address         = l_same_as_agqname_address
        agqmailingaddress:last_name_1                     = l_last_name_1
        agqmailingaddress:first_name_1                    = l_first_name_1
        agqmailingaddress:middle_initial_1                = l_middle_initial_1
        agqmailingaddress:last_name_2                     = l_last_name_2
        agqmailingaddress:first_name_2                    = l_first_name_2
        agqmailingaddress:middle_initial_2                = l_middle_initial_2
        agqmailingaddress:name_3                          = l_name_3
        agqmailingaddress:po_box                          = l_po_box
        agqmailingaddress:email_address                   = l_email_address
        }
    END

END

number function check_required_fields_for_credit_Score
BEGIN
unsigned ascii number l_ready_to_go[1] = 0;

access iix_transunion_score, set iix_transunion_score:which_protocol = l_which_protocol, approximate

if Trun(iix_transunion_score:last_name) = "" then
    {
    l_ready_to_go = 1
    }
else
if Trun(iix_transunion_score:first_name) = "" then
    {
    l_ready_to_go = 2
    }
else
if Trun(iix_transunion_score:house_number) = "" then
    {
    l_ready_to_go = 3
    }
else
if Trun(iix_transunion_score:street_name) = "" then
    {
    l_ready_to_go = 4
    }
else
if Trun(iix_transunion_score:city_name) = "" then
    {
    l_ready_to_go = 5
    }
else
if Trun(iix_transunion_score:str_state) = "" then
    {
    l_ready_to_go = 6
    }
else
if Trun(iix_transunion_score:zip_code) = "" then
    {
    l_ready_to_go = 7
    }
else
    {
    l_ready_to_go = 0   --all fields above have values in them
    }

return(l_ready_to_go)
END

procedure fill_in_iix_transunion_score
BEGIn
local string l_street_and_type_together[27];
local string l_prior_street_and_type_together[27];

include "sfsrevname.var"

access iix_transunion_score, set iix_transunion_score:which_protocol = l_which_protocol, approximate

i_name = agqmailingaddress:business_owners_name
Include "sfsrevname7.pro"

if trun(uppercase(iix_transunion_score:which_protocol)) = trun(l_which_protocol) then
    {
    change iix_transunion_score
        {
        --other fields are optional or already filled in in /data/scratch
        iix_transunion_score:last_name               = l_last_name_1
        iix_transunion_score:first_name              = l_first_name_1
        if val(agqmailingaddress:house_number) = 0 then
            {
            iix_transunion_score:house_number        = "1"
            }
        else
            {
            iix_transunion_score:house_number        = agqmailingaddress:house_number
            }
        iix_transunion_score:street_direction        = agqmailingaddress:street_direction

        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:ST_TYPE    = l_tu_street_type, generic

        if trun(sfsstrtype:tu_st_type) = "" then  --tsu want anything that is not in the list of valid street type to be added to the street name
            {
            l_street_and_type_together = trun(l_street_name) + l_tu_street_type      --if total lenght is over 27 it will not have the entire street type
            iix_transunion_score:street_name  = l_street_and_type_together
            }
        else
            {
            iix_transunion_score:street_name  = l_street_name
            }
        iix_transunion_score:street_type             = agqmailingaddress:street_type
        iix_transunion_score:apt_number              = agqmailingaddress:apt_number
        iix_transunion_score:city_name               = agqmailingaddress:mailing_city
        iix_transunion_score:str_state               = agqmailingaddress:mailing_state
        iix_transunion_score:zip_code                = agqmailingaddress:mailing_zipcode[1,5] + "-" + agqmailingaddress:mailing_zipcode[6,9]
        if val(agqmailingaddress:prior_house_number) = 0 then
            {
            iix_transunion_score:prior_house_number  = "1         "
            }
        else
            {
            iix_transunion_score:prior_house_number  = agqmailingaddress:prior_house_number
            }
        iix_transunion_score:prior_street_direction  = agqmailingaddress:prior_street_direction

        access SFSSTRTYPE, set SFSSTRTYPE:company_id = agqname:company_id,
                               sfsstrtype:ST_TYPE    = l_prior_street_type, generic

        if trun(sfsstrtype:tu_st_type) = "" then  --tsu want anything that is not in the list of valid street type to be added to the street name
            {
            l_prior_street_and_type_together = trun(l_prior_street_name) + l_prior_street_type      --if total lenght is over 27 it will not have the entire street type
            iix_transunion_score:prior_street_name  = l_prior_street_and_type_together
            }
        else
            {
            iix_transunion_score:prior_street_name  = l_prior_street_name
            }
        iix_transunion_score:prior_street_type       = agqmailingaddress:prior_street_type
        iix_transunion_score:prior_apt_number        = agqmailingaddress:prior_apt_number
        iix_transunion_score:prior_city              = agqmailingaddress:prior_city
        iix_transunion_score:prior_state             = agqmailingaddress:prior_state
        iix_transunion_score:prior_zip               = agqmailingaddress:prior_zip_code[1,5] + "-" + agqmailingaddress:prior_zip_code[6,9]
        iix_transunion_score:quoteback               = "Farmers of Salem"
        }
    }

END

End
