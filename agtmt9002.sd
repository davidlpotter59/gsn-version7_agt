%%                      
Screen
        Name = "agtmt9002";
        Type = "Detail" ;
        Highlight=Underscore ;
        Padcharacter=Space ;
        Screensize="dynamic";
        Windowtitle="%a     %s Rating Information    %m";
        Domain="agqname" ;
        resizeable = yes ;
        iconline = 0 ;
        autoaccept = true ;

        Global Unsigned Ascii Number G_APP_NO[11] ;
        Global Unsigned Ascii Number G_LINE_OF_BUSINESS[4] ;
        Global Unsigned Ascii Number G_OPT[2] ;
        global unsigned ascii number g_add_prem_no[1] ;
        global unsigned ascii number g_add_build_no[1] ;
        global unsigned ascii number g_add_new_quote[1] ;
        global unsigned ascii number g_prem_no[4] ;
        global unsigned ascii number g_build_no[4];
        global unsigned ascii number g_from_search_screen[1] ;
        global unsigned ascii number g_form[1] ;
        global unsigned ascii number g_state[2] ;
        global unsigned ascii number g_protection[2] ;
        global unsigned ascii number g_policy_no[9] ;
        global unsigned ascii number g_year[4] ;
        global unsigned ascii number g_end_sequence[4] ;

        global string g_company_id[10] ,
                      g_zipcode_change[1] ,
                      g_initial_screen[50],
                      g_inquiry[1] ,
                      g_code[7] ,
                      g_str_state[2] ,
                      g_ok_to_continue[1] ;

        global wdate g_eff_date ,
                     g_exp_date;

        rwdate l_sfqname_eff_date;
        wdate  l_rich_date;
        rwdate l_score_received_date ;

        number function check_required_fields_for_credit_score();
        number function check_required_fields_for_claims();
        number function check_required_fields_for_property_characteristics();

        local signed ascii number l_billing_amount[9]=0/dec=2;

        Local Unsigned Ascii Number L_SUB_CODE[4] ,
                                    l_billing_amount_3[9],
                                    l_state[2],
                                    l_construction_type_1[4],
                                    l_sub[2],
                                    l_period_at[1],
                                    l_dollar_sign_at[1],
                                    l_space_at[1],
                                    l_roof_type[2],
                                    l_claim_year[2],
                                    l_major_loss_found[2],
                                    l_installation_id[5],
                                    l_minor_loss_found[2],
                                    l_no_major_losses_found[2],
                                    l_no_minor_losses_found[2],
                                    l_year_built[4],
                                    l_construction[1],
                                    l_square_feet[5],
                                    l_swimming_pool[1],
                                    l_oil_heat[1],
                                    l_wood_stove[1],
                                    l_po_box_1[1],
                                    l_no_bathrooms[3]/dec=1,
                                    l_leed_certified[1],
                                    l_no_stories[1],
                                    l_restricted[1]=0,
                                    l_hurricane_deductible[5],
                                    l_new_home_discount_factor[4]=0/dec=3,
                                    l_ctr2[2],
                                    l_restricted_distance[5]=0/dec=2,
                                    l_lib7_pos[4],
                                    l_start_dir_pos[4],
                                    l_dont_get_credit_score[1],
                                    l_refused_credit_score[1],
                                    l_transunion_credit_score[4],
                                    l_val_zipcode[5],
                                    l_zipcode_5[5],
                                    l_agent_no[4],
                                    l_default_contents_limit[8],
                                    l_county[3],
                                    l_wind_deductible[5],
                                    l_protection[2],
                                    l_no_units[2],
                                    l_app_no[11],
                                    l_rating_territory[3],
                                    l_loop[4],
                                    l_exclude_terrorism[1]=0,
                                    l_prem_no[4]=0,
                                    l_group[2],
                                    l_table_1[2],
                                    l_binding_limit[8]=0,
                                    l_filed_limit[8]=0,
                                    l_dwelling_limit[8]=0,
                                    l_contents_limit[8]=0,
                                    l_no_years[4]=0,
                                    l_premium_1[8]=0/dec=4,
                                    l_premium_2[8]=0/dec=4,
                                    l_premium_3[8]=0/dec=4,
                                    l_premium_4[8]=0/dec=4,
                                    l_premium_5[8]=0/dec=4,
                                    l_premium_6[8]=0/dec=4,
                                    l_new_home_year[4]=0,
                                    l_new_year_2[2]=0,
                                    l_build_no[4]=0,
                                    l_off_premises_limit[8]=0,
                                    l_mcp140_limit[8],
                                    l_mm[2],
                                    l_yyyy[4],
                                    l_dd[2],
                                    l_territory[3],
                                    l_increase_cov_c[8]=0/dec=4,
                                    l_prior_limit[8],
                                    l_townhouse[1],
                                    l_limit[8],
                                    l_minimum_limit[8],
                                    l_maximum_limit[8],
                                    l_zipcode[9],
                                    l_zipcode1_1[1],
                                    l_zipcode1_2[1],
                                    l_zipcode1_3[1],
                                    l_zipcode1_4[1],
                                    l_zipcode1_5[1],
                                    l_table[1],
                                    l_nonowned_factor[5]=0/dec=3,
                                    l_no_families[1],
                                    l_building_minimum_limit[8],
                                    l_contents_minimum_limit[8],
                                    l_combined_minimum_limit[8],
                                    l_building_maximum_limit[8],
                                    l_contents_maximum_limit[8],
                                    l_combined_maximum_limit[8],
                                    l_building_binding_limit[8],
                                    l_contents_binding_limit[8],
                                    l_combined_binding_limit[8],
                                    l_plspreprinted_alarm_factor[4]=0/dec=3,
                                    l_fpl01_form[1],
                                    l_min_error[1],
                                    l_max_error[1],
                                    l_binding_error[1],
                                    l_combined_limit[8]=0,
                                    l_rating_territory_group_1[1],
                                    l_rating_territory_group_2[1],
                                    l_rating_territory_group_3[1],
                                    l_group_1[5]=0/dec=3,
                                    l_group_2[5]=0/dec=3,
                                    L_CLASS_CODE[5],
                                    l_restaurant[1],
                                    l_year[4],
                                    l_end_sequence[4],
                                    l_tier_1[2],
                                    L_PROPERTY_LIMIT[8]=0,
                                    l_property_limit_1[8]=0,
                                    L_LINE_OF_BUSINESS[2] ,
                                    L_AR_LIMIT[8],
                                    L_COMPUTER_LIMIT[8],
                                    l_csexec_number[12],
                                    l_abort_program[1],
                                    L_UTILITY_LIMIT[8],
                                    L_MECHANICAL_LIMIT[8],
                                    L_EXTERIOR_SIGNS_LIMIT[8],
                                    L_EMPLOYEE_LIMIT[8],
                                    L_GLASS_LIMIT[8],
                                    L_SEWER_LIMIT[8],
                                    L_VALUABLE_LIMIT[8],
                                    L_FORM[1] ,
                                    l_tier[2]=0,
                                    l_prior_address_less_then_x_years,
                                    l_same_as_agqname_address[1],
                                    l_ssn[9],
                                    l_days[2],
                                    l_Form_1[1] ;

        Local String L_DESC[50] ,
                     L_REINSURANCE[1] ,
                     l_prior_zipcode[9],
                     l_city_valid[1],
                     l_payment_made[1]="N",
                     l_make_a_payment[1]="N",
                     l_billing_amount_1[9],
                     l_billing_amount_2[9],
                     l_billing_amount_4[9],
                     l_billing_amount_str[9],
                     l_ok_to_show[1]="Y",
                     l_hold_billing_amount[9],
                     l_str_state[2],
                     l_url[3000],
                     l_ip_address[17],
                     l_billing_name[200],
                     l_address[200],
                     l_city[50],
                     l_country,
                     l_str_policy_no,
                     l_amount,
                     l_occupation[50],
                     l_found[1],
                     l_continue[1],
                     l_construction_type[50],
                     l_heat_type[50],
                     l_roof_type_desc[50],
                     l_county_name[75],
                     l_claim_type[14],
                     l_first_name_1[15],
                     L_MACRO[15]="" ,
                     L_REPORT[15]="",
                     L_PARAMETER[20]="" ,
                     L_AR_COMMAND_LINE[55] ,
                     l_commandline_1[17],
                     l_sfs_code[3]="SFS",
                     l_email_address[50],
                     l_middle_initial_1[1],
                     l_last_name_1[25],
                     l_rating_group[1],
                     l_first_name_2[15],
                     l_middle_initial_2[1],
                     l_last_name_2[25],
                     i_middle_initial[1],
                     l_name_1[50],
                     l_name_2[50],
                     l_credit_score_file[12]= "credit_score",
                     l_claim_file[5]="claim",
                     l_property_file[8]="property",
                     l_credit_score_error_message[18] = "error_credit_score" ,
                     l_limit_wording[15],
                     l_claim_error_message[11]="error_claim",
                     l_property_error_message[14]="error_property",
                     l_credit_score[5],
                     l_claim[5],
                     l_property[5],
                     l_credit_error_message[300],
                     l_claims_error_message[300],
                     l_property_char_error_message[300],
                     l_which_protocol[40],
                     l_which_protocol_1[40],
                     l_current_path[2048],
                     l_current_environment[100],
                     l_designation[7],
                     l_apt_number[5],
                     l_street_direction[2],
                     l_house_number[10],
                     l_po_box[10],
                     l_name_3[50],
                     l_street_name[27],
                     l_street_type[6],
                     l_prior_house_number[10],
                     l_prior_street_direction[2],
                     l_prior_street_name[27],
                     l_prior_street_type[6],
                     l_prior_apt_number[5],
                     l_prior_designation[7],
                     l_prior_city[27],
                     l_prior_state[2],
                     l_prior_zip_code[10],
                     l_filed_message[100],
                     l_hurricane_code[7],
                     l_sub_line[2],
                     l_record_key[2],
                     l_owner_occupied[1],
                     l_updated[1],
                     l_zip_code_5[5],
                     l_mpl47[1],
                     l_agent_wording[9]="Agent No:",
                     l_current_web_page[55],
                     l_web_site_address[150],
                     l_server_name[100],
                     l_mpl49[1],
                     l_printers_credit_wording[23]="Printers Credit:",
                     l_total_printers_wording[23]="Total Printers:",
                     l_mho45[1],
                     l_mpl13[1],
                     l_first[1],
                     l_new_home_discount[1],
                     l_str_zipcode[9]="",
                     l_buyback_option_wording[23]="Buyback Option Charge:",
                     l_fungi_mold_wording[23]="Fungi/Mold Limitations:",
                     l_lob_code[10],
                     l_irpm_wording[12]="IRPM:",
                     l_enter[1],
                     l_minimum_message[200],
                     l_combined_minimum_message[200],
                     l_maximum_message[200],
                     l_combined_maximum_message[200],
                     l_binding_message[200],
                     l_combined_binding_message[200],
                     l_contact_message[200],
                     l_mp_wording[4]="M.P.",
                     l_continue_1[3]="",
                     l_continue_2[3]="",
                     l_continue_3[3]="",
                     l_dec[15]="",
                     l_app[3]="agq",
                     L_CODE[7],
                     L_CODE_1[7],
                     L_CODE_2[7],
                     L_CODE_3[7],
                     L_CODE_4[7],
                     L_CODE_5[7],
                     L_CODE_6[7],
                     L_CODE_7[7],
                     L_CODE_8[7],
                     l_code_9[7],
                     l_code_10[7],
                     l_code_11[7],
                     l_code_12[7],
                     l_code_13[7],
                     l_code_14[7],
                     l_code_15[7],
                     l_code_16[7],
                     l_code_17[7],
                     l_code_18[7],
                     l_code_19[7],
                     l_code_20[7],
                     l_code_21[7],
                     l_code_22[7],
                     l_code_23[7],
                     l_code_24[7],
                     l_code_25[7],
                     l_code_26[7],
                     l_code_27[7],
                     l_code_28[7],
                     l_code_29[7],
                     l_code_30[7],
                     l_code_31[7],
                     l_csexec_application[25],
                     l_processing_system[30],
                     l_rating_system[40],
                     l_continue_4[2],
                     l_territory_wording[10]="Territory:",
                     l_system_id[15],
                     L_SCREEN[15] ,
                     l_screen_1[9],
                     l_screen_2[10],
                     L_FORM_EDITION[18],
                     L_DESCRIPTION[55],
                     L_COMPUTER_DESC[50] ,
                     L_DELETE_NONOWNED_HIRED[1]="N",
                     L_ADD_ENDORSEMENT[1]="Y",
                     L_PROPERTY_LIMIT_CHANGE[1]="N",
                     l_sfqname_str[10],
                     L_COMPANY_ID[10] ;

        local wdate l_eff_date ,
                    l_sal_eff_date ;

        include "print.var"

        include "virtualdecs.var"

        include "sfscsexec.var"

        Access agqname,
           Set agqname:app_no = G_app_no, generic

        Include "stdkeys7.inc"

Style Definition
        Include "styles.inc"
        Displayonly Field Style {
                                  backgroundcolor="#CCCCCC"
                                }


Functions

        "redisplay" display/noreturn "agtmt9002" ;

        "add" sequence "new"      tagged add_fn ;
        "new" add/hidden/autoupdate ;

        "change" sequence "chg"   tagged change_fn ;
        "chg" change/hidden/autoupdate ;

        "func1" sequence "rate" tagged calc_fn ;

        "back" display/noreturn "agtmt001" tagged back_fn ;
         reaccess ;

        "nextscreen" sequence "rate"  tagged nextscreen_fn ;
        "rate" continue begin
                        if g_form = 3 then
                            l_screen_2 = "agtmt9003"
                        else
                            l_screen_2 = "agtmt9003f"
                        function = "popup"
                        end ;
        "popup" display/noreturn l_screen_2 ;
        "previousscreen" display/noreturn "agtmt9001"  tagged previousscreen_fn ;
        "quotesummary"   display/noreturn "agtmt9006" tagged quotesummary_fn ;

        "location"       display "agtmt9002a" tagged location_fn ;
        "prior_location" display "agtmt9002b" tagged prior_address_fn ;

        "func4" sequence "prtpolicy"  tagged print_policy_fn ;
        "prtpolicy" continue begin
                             do print_policy
                             end ;

        "apply_payment" sequence "mob_pay" tagged apply_check_fn ;
        "mob_pay" continue begin
                           message "Processing, Please Wait"
                           do set_browser
                           do make_payment(l_url)
                           if mobpaymentfile:ip_address <> "" then
                               begin
                               showdocument(l_url,"iexplore.exe")
                               end
                           message ""
                           function = "redisplay"
                           end ;

        include "stdfunc7b.inc"

EVENT DEFINITION
        default eventhandler {
                             "REMOVE_SCREEN" { function = "exit" abort () }
                             "reload" { function = "reaccess" abort () }
                             "display_message" { warning "" + event.value }
                             "current_line_of_business" {
                                                          g_line_of_business = val(event.value)
                                                        }
                             }
Menu Definition

Toolbar Definition

Screen Entry
do read_agqcreditscore_d11_code
access sfsdefault, set sfsdefault:sfs_code = "SFS", generic

disable(accept_fn)
g_initial_screen = ""
l_username = username
l_company_id = sfsdefault:company_id

access sfsemail,
   set sfsemail:company_id = l_company_id,
       sfsemail:user_id    = l_username, generic

access sfsagent,
   set sfsagent:company_id = l_company_id,
       sfsagent:agent_no   = sfsemail:agent_no, generic

l_state = sfsagent:state
access sfsline,
   set sfsline:company_id       = l_company_id,
       sfsline:line_of_business = g_line_of_business,
       sfsline:lob_subline      = "00", generic

switch(g_line_of_business)
  case 1, 31  : switch(g_form)
                  case 1  : setproperty(t_mdw1,iconname,"title_cd_basic_mdw1.bmp")
                  case 2  : setproperty(t_mdw2,iconname,"title_cd_broad_mdw2.bmp")
                  case 3  : setproperty(t_mdw3,iconname,"title_cd_special_mdw3.bmp")
                  case 6  : setproperty(t_mdw6,iconname,"title_cd_condo_mdw6.bmp")
                  default : begin
                            setproperty(t_mdw1,iconname,"")
                            setproperty(t_mdw2,iconname,"")
                            setproperty(t_mdw3,iconname,"")
                            setproperty(t_mdw6,iconname,"")
                            end
                  end
  case 4, 34  : switch(g_form)
                  case 3  : setproperty(t_mho3,iconname,"title_mho3.bmp")
                  case 4  : setproperty(t_mho4,iconname,"title_mho4.bmp")
                  case 6  : setproperty(t_mho6,iconname,"title_mho6.bmp")
                  default : begin
                            setproperty(t_mho3,iconname,"")
                            setproperty(t_mho4,iconname,"")
                            setproperty(t_mho6,iconname,"")
                            end
                  end
  case 14, 44 : switch(g_form)
                  case 3  : setproperty(t_pref_mho3,iconname,"title_ho_preferred_mho3.bmp")
                  case 5  : setproperty(t_pref_mho5,iconname,"title_ho_preferred_mho5.bmp")
                  default : begin
                            setproperty(t_pref_mho3,iconname,"")
                            setproperty(t_pref_mho5,iconname,"")
                            end
                  end
  case 24, 54 : switch(g_form)
                  case 3  : setproperty(t_prem_mho3,iconname,"title_ho_premier_mho3.bmp")
                  default : setproperty(t_prem_mho3,iconname,"")
                  end
  end

access sfsdefault, set sfsdefault:sfs_code = "SFS", generic

if sfsdefault:company_id one of "FLEMINGTON" then
    hide(farmers_fn)
else
if sfsdefault:company_id one of "FARMERS" then
    hide(ficof_fn)

access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

if agqmailingaddress:if_at_address_less_then_x_years = 0 then
     disable(prior_address_fn)

if g_inquiry <> "Y" then
    g_inquiry = "N"

if l_company_id <> "FARMERS" then
    hide(farmers_fn)

access sfsemail, set sfsemail:company_id = l_company_id,
                     sfsemail:user_id    = l_username, generic

access agqpersonal, set agqpersonal:app_no = g_app_no, generic

if agqname:quote_no <> 0 then
    begin
    disable(change_fn)
    disable(delete_fn)
    disable(accept_fn)
    end

access agqname_alias, set agqname_alias:app_no = g_app_no, generic

if agqname_alias:app_no = 0 then
    begin
    disable(change_fn)
    end
else
if agqname_alias:app_no <> 0 and
   agqname_alias:quote_no = 0 then
    begin
    enable(change_fn)
    end

if agqname:eff_date = 0 then
    function = "CHANGE"

access agqpersonal, set agqpersonal:app_no = g_app_no, generic

if agqpersonal:app_no = g_app_no and
   agqpersonal:dwelling_limit <> 0 or
   agqpersonal:contents_limit <> 0 then
    begin
    if g_ok_to_continue = "N" then
        disable(quotesummary_fn)
    else
        enable(quotesummary_fn)
    end
else
    disable(quotesummary_fn)

access agqname, set agqname:app_no = g_app_no, generic

if agqname:quote_no <> 0 then
    begin
    disable(change_fn)
    disable(add_fn)
    disable(delete_fn)
    end

if agqname:policy_no = 0 then
    hide(print_policy_fn)

if agqname:policy_no <> 0 then
    begin
    do check_arschksu
    l_ok_to_show = "Y"
    do check_dates
    if l_payment_made = "Y" or
       l_ok_to_show = "N" then
        disable(apply_check_fn)
    else
        enable(apply_check_fn)
    end

access agsdefault_plp, set agsdefault_plp:company_id       = agqpersonal:company_id,
                           agsdefault_plp:state            = agqpersonal:state,
                           agsdefault_plp:agent_no         = agqpersonal:agent_no,
                           agsdefault_plp:line_of_business = agqpersonal:line_of_business,
                           agsdefault_plp:form             = agqpersonal:form, generic

if ((agsdefault_plp:allow_agent_to_print = 0 and
   sfsemail:agent_no <> 0) or
   agqname:policy_no = 0) then
    hide(apply_check_fn)

access validation
if agqname:app_no <> g_app_no then
    error 1000 ;

screen at 1,1 to 30,100
    Properties
          {
          Layouttype = screen
          transparent = False
          backgroundcolor = "#ADD8E6"
          scrollbarpolicy = always
          fontstyle = BOLD
          }
    {

    Panel at 1,1 to 2,100
        Properties
            {
            layouttype = screen
            }
        {
        components
            guidetext at 1,1 to 2,40
                properties
                    {
                    iconname = "qp_logo.gif"
                    }
            guidetext at 1,83 to 2,100 tagged ficof_fn
                properties
                    {
                    iconname = "ficof_logo.gif"
                    }
            guidetext at 1,80 to 2,100 tagged farmers_fn
                properties
                    {
                    iconname = "salem_logo.gif"
                    }
            guidetext at 1.30,40 tagged t_mdw1
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,40 tagged t_mdw2
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,40 tagged t_mdw3
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,40 tagged t_mdw6
                Properties
                   {
                   iconname = ""
                   }

            guidetext at 1.30,28 tagged t_mho3
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,20 tagged t_mho4
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,28 tagged t_mho6
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,32 tagged t_pref_mho3
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,32 tagged t_pref_mho5
                Properties
                   {
                   iconname = ""
                   }
            guidetext at 1.30,32 tagged t_prem_mho3
                Properties
                   {
                   iconname = ""
                   }
        }

panel at 3,1 to 4,100
    Properties
        {
        LayoutType = screen
        backgroundcolor = "Grey"
        transparent = False
        }
    {
    components
        guidetext at 1.45,1 to 1.45,40     tagged display_information_box
            properties
                {
                text = "Mailing and Location Information"
                fontsize = 18
                fontstyle = BOLD
                fontname = "arial"
                transparent = False
                backgroundcolor = "Grey"
                }

    }

Panel at 3.45,75 to 4.45, 100
    Properties
        {
        LayoutType = screen
        }
{
%%
App No: ___________

%%

fields
101     agqname:APP_NO/displayonly ;

}

Panel at 5,1 to 6,100 Tagged icon_line2_tg
Properties
        {
        LayoutType = screen
        }
{
Components

        Button at 1.5,10    tagged change_fn
        Properties {
                Iconname = "btn_edit_entries.bmp"
                }
        Events  {
                Action = change_fn
                }

        Button at 1.5,60 tagged accept_fn
          properties
            {
              Iconname = "btn_accept_edits.bmp"
            }
          Events  {
                    mouseclicked = accept
                  }
    }

Panel at 7,1 to 8,100 Tagged icon_line2_tg
Properties
        {
        LayoutType = screen
        }
{
Components

        Button at 1,5   tagged apply_check_fn
        Properties {
                Iconname = "apply_payment.bmp"
                }
        Events  {
                Action {
                       l_make_a_payment = "Y"
                       function =  "apply_payment"
                       disable(apply_check_fn)
                       abort()
                       }
                }
        Button at 1,37   tagged back_fn
        Properties {
                Iconname = "btn_back_to_main_screen.bmp"
                }
        Events  {
                Action {
                          l_continue_2 = dialog("EXITING","warning.bmp","You are about to leave the application, Do you wish to continue","Yes","No")
                          if l_continue_2 = "Yes" then
                              begin
                              function = "back"
                              abort()
                              end
                       }
                }
        Button at 1,70   tagged print_policy_fn
        Properties {
                Iconname = "btn_view_print_policy.bmp"
                }
        Events  {
                Action = print_policy_fn
                }



}

Panel at 5,94 to 6,96 tagged button_panel
    Properties
        {
        layouttype = column
        }
    {
    Components
        Button to 1,1
            properties
                {
                Iconname = "btn_print_screen.bmp"
                }
            events
                {
                action
                    {
                    function = "print"
                    abort()
                    }
                }
    }

Panel at 6.45,91
    Properties
        {
        layouttype = column
        }
    {
    Components
        guidetext to 1,1
            properties
                {
                text = "agtmt9002.sd"
                fontsize = 9
                }
    }

panel at 8,1 to 8,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

Panel at 10,1 to 25, 100  tagged farmers_fn
{
%%
Eff Date:   __________     Occupation: __________________________________________________

Last Name:  _________________________  First:  _______________   MI: __ SSN: ____________
Last Name:  _________________________  First:  _______________   MI: __
C/O:        __________________________________________________
                              MAILING ADDRESS
       Number  Direction           Street              Type  Designation  Apt No
     __________   ___    ___________________________  ______    _______    _____
        PO Box #: __________
         Address: __________________________________________________
                  __________________________________________________
                  __________________________________________________
  City/State/Zip: ______________________________  ___  ___________
   Email Address: __________________________________________________ Telephone: ________________
Location Address is the Same as Mailing:~~_
                          Prior Address:~~_ (Only if at current address less then 2 years)

%%

components

fields
101     begin
        if function one of "CHG","CHANGE" then
            {
            disable(calc_fn)
            disable(previousscreen_fn)
            disable(nextscreen_fn)
            disable(quotesummary_fn)
            disable(back_fn)
            disable(location_fn)
            disable(prior_address_fn)
            enable(accept_fn)
            agqname:trans_date = todaysdate
            }
        else
            {
            enable(calc_fn)
            enable(previousscreen_fn)

            if agqpersonal:contents_limit <> 0 or
               agqpersonal:dwelling_limit <> 0 then
                begin
                if g_ok_to_continue = "N" then
                    disable(quotesummary_fn)
                else
                    enable(quotesummary_fn)
                end
            else
                disable(quotesummary_fn)

            enable(back_fn)
            enable(location_fn)
            if agqmailingaddress:if_at_address_less_then_x_years = 1 or
               l_prior_address_less_then_x_years = 1 then
                enable(prior_address_fn)
            else
                disable(prior_address_fn)
            disable(accept_fn)
            }

        access agqname_alias, set agqname_alias:app_no = g_app_no, generic

        if agqname_alias:app_no = 0 then
            begin
            disable(change_fn)
            end
        else
        if agqname_alias:app_no <> 0 and
           agqname_alias:quote_no = 0 then
            begin
            enable(change_fn)
            end
        end
        agqname:eff_date/default/tabstop  mandatory
        if agqname:eff_date < todaysdate - 30 then
            error "The effective date can not be more than 30 days from todaysdate"

        if agqname:eff_date > todaysdate + 365 then
            error "The effective date can not be more than 1 year from todaysdate"

        if month(agqname:eff_date) = 02 and
           day(agqname:eff_date) = 29 and
           sfsemail:agent_no <> 0 then
            error "Please change your effective date to 2-28"

        if agqname:eff_date < 05.15.2011 then
            begin
            l_continue_2 = dialog("DATE","warning.bmp","Homeowners Advantage Program Effective 5-15-2011 - Do you wish to continue","Yes","No")
            if l_continue_2 = "Yes" then
                begin
                error "Please change your date entered"
                end
            else
                begin
                abort()
                end
            end

        agqname:exp_date = dateadd(agqname:eff_date,0,1)
        agqname:original_eff_date = agqname:eff_date
        g_eff_date = agqname:eff_date
        g_exp_date = agqname:exp_date ;
102     begin
        access agqpersonal, set agqpersonal:app_no = g_app_no, generic

        l_occupation = agqpersonal:occupation
        end
        l_occupation/default/uppercase/tabstop mandatory
        access agqpersonal, set agqpersonal:app_no = g_app_no, generic

        if agqpersonal:app_no = g_app_no then
            begin
            if agqpersonal:occupation <> l_occupation then
                begin
                change agqpersonal
                    begin
                    agqpersonal:occupation = l_occupation
                    end
                end
            end
        else
        if agqpersonal:app_no <> g_app_no then
            begin
            if agqpersonal:occupation <> l_occupation then
                begin
                add agqpersonal
                    begin
                    agqpersonal:app_no     = g_app_no
                    agqpersonal:prem_no    = 1
                    agqpersonal:build_no   = 1
                    agqpersonal:occupation = l_occupation
                    end
                end
            end ;

301     begin
        l_last_name_1                     = ""
        l_first_name_1                    = ""
        l_middle_initial_1                = ""
        l_last_name_2                     = ""
        l_first_name_2                    = ""
        l_middle_initial_2                = ""
        l_name_3                          = ""
        l_po_box                          = ""
        l_email_address                   = ""

        access sfsdefault, set sfsdefault:sfs_code = "SFS", generic

        access agqmailingaddress, set agqmailingaddress:app_no = agqname:app_no, generic

        access agqcreditscore, set agqcreditscore:app_no = agqname:app_no, generic

        if agqcreditscore:app_no = agqname:app_no then
            l_ssn = agqcreditscore:ssn

        if agqmailingaddress:app_no = agqname:app_no then
            begin
            l_last_name_1                     = agqmailingaddress:last_name_1
            l_first_name_1                    = agqmailingaddress:first_name_1
            l_middle_initial_1                = agqmailingaddress:middle_initial_1
            l_last_name_2                     = agqmailingaddress:last_name_2
            l_first_name_2                    = agqmailingaddress:first_name_2
            l_middle_initial_2                = agqmailingaddress:middle_initial_2
            l_name_3                          = agqmailingaddress:name_3
            l_po_box                          = agqmailingaddress:po_box
            l_email_address                   = agqmailingaddress:email_address
            end

        if l_po_box = "" then
            do parse_address_line(agqname:address[1])
        end
        l_last_name_1/tabstop/uppercase/default mandatory
        hide if function one of "SEARCH" ;
302     l_first_name_1/tabstop/uppercase/default mandatory;
303     l_middle_initial_1/tabstop/uppercase/default ;
304     l_ssn/tabstop/default ;
304     str(l_ssn[6,9])/displayonly/mask="***-**-9999"
        access agqcreditscore, set agqcreditscore:app_no = g_app_no, generic

        if agqcreditscore:app_no = g_app_no then
            begin
            change agqcreditscore
                begin
                agqcreditscore:ssn = l_ssn
                end
            end
        else
            begin
            add agqcreditscore
                begin
                agqcreditscore:app_no = g_app_no
                agqcreditscore:ssn    = l_ssn
                end
            end ;
401     l_last_name_2/tabstop/uppercase/default
        hide if function one of "SEARCH" ;
402     l_first_name_2/tabstop/uppercase/default ;
403     l_middle_initial_2/tabstop/uppercase/default ;
501     l_name_3/tabstop/uppercase/default
        if l_name_3 <> "" and
           l_name_3[1,3] <> "C/O" then
            l_name_3 = "C/O " + l_name_3
        if function one of "CHANGE", "CHG" then
            do change_agqname ;

801     l_house_number/default/tabstop  ;
802     begin
        access sfsdirection_alias,
            set sfsdirection_alias:company_id = agqname:company_id, approximate
        end
        l_street_direction/default/uppercase/tabstop
        access sfsdirection,
           set sfsdirection:company_id = agqname:company_id,
               sfsdirection:direction  = l_street_direction, exact

        If l_street_direction <> SFSDIRECTION:DIRECTION Then
            Error 1404

        Activehelp SFSDIRECTION_ALIAS:DIRECTION ,
                   SFSDIRECTION_ALIAS:DESCRIPTION;
803     l_street_name/uppercase/default/mandatory/tabstop;
804     begin
        access SFSSTRTYPE_alias,
            set SFSSTRTYPE_alias:company_id = agqname:company_id, approximate
        end
        l_street_type/default/uppercase/tabstop
        access SFSSTRTYPE,
          set SFSSTRTYPE:company_id = agqname:company_id,
              sfsstrtype:st_type    = l_street_type, exact

        If l_street_type <> SFSSTRTYPE:ST_TYPE Then
            Error 1307

        Activehelp SFSSTRTYPE_alias:ST_TYPE,
                   SFSSTRTYPE_alias:DESCRIPTION ;
805     begin
        access SFSdesignation_alias,
            set SFSdesignation_alias:company_id = agqname:company_id, approximate
        end
        l_designation/default/uppercase/tabstop
        access SFSdesignation,
          set SFSdesignation:company_id  = agqname:company_id,
              sfsdesignation:designation = l_designation, exact

        If l_designation <> SFSdesignation:designation Then
            Error 1307

        activehelp sfsdesignation_alias:designation,
                   sfsdesignation_alias:description;
806     l_apt_number/default/uppercase/tabstop;
901     l_po_box/default/uppercase/tabstop ;

1001    begin
        if FUNCTION one of "CHANGE" , "CHG" then
            begin
            agqname:address[1] = ""
            if Trun(l_house_number) <> "" then
                agqname:address[1] = trun(agqname:address[1]) + Trun(l_house_number)

            if Trun(l_street_direction) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(SFSDIRECTION:description)

            if Trun(l_street_name) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(l_street_name)

            if Trun(l_street_type) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(SFSSTRTYPE:description)

            if Trun(l_designation) <> "" then
                agqname:address[1] = trun(agqname:address[1])  + " " + Trun(l_designation)

            if trun(l_apt_number) <> "" then
                begin
                agqname:address[1] = trun(agqname:address[1]) + " " + l_apt_number
                end

            if trun(l_po_box) <> "" then
                agqname:address[1] = "PO Box " + trun(l_po_box)
            end
        end
        agqname:address[1]/tabstop/uppercase/default ;
1101    agqname:address[2]/tabstop/uppercase ;
1201    agqname:address[3]/tabstop/uppercase ;
1303    begin
            l_prior_zipcode = agqname:str_zipcode
        end
        agqname:STR_ZIPCODE/default/tabstop
        if val(agqname:str_zipcode) = 0 then
            error "Please enter only numbers"

        if len(trun(agqname:str_zipcode)) <> 5 and
           len(trun(agqname:str_zipcode)) <> 9 then
            error "Length of Zipcode must 5 or 9 characters"

        switch(agqname:str_state)
          case "NJ" : l_state = 29
          case "MD" : l_state = 19
--          default   : l_state = 29
          end

        if val(agqname:str_zipcode) <> 0 and
           agqname:STR_ZIPCODE[6,9] = "" Then
            begin
            agqname:STR_ZIPCODE[6,9] = "0000"
            end

        l_str_zipcode = agqname:str_zipcode[1,5] + "0000"
        access sfszipcode, set sfszipcode:company_id       = agqname:company_id,
                               sfszipcode:state            = l_state,
                               sfszipcode:line_of_business = g_line_of_business,
                               sfszipcode:str_zipcode      = l_str_zipcode, generic

        l_po_box_1 = sfszipcode:po_box_only
        if agqname:str_zipcode <> sfszipcode:str_zipcode and
           agqname:str_zipcode[1] = "0" then
            error "Invalid Zip Code Entered"
        else
        if agqname:str_zipcode = sfszipcode:str_zipcode and
           sfszipcode:acceptable_city[1] = ""then
            begin
            l_city_valid = "Y"
            agqname:city = sfszipcode:city
            end
        else
        if sfszipcode:acceptable_city[1] <> "" and
           agqname:str_zipcode = sfszipcode:str_zipcode then
            begin
            l_city_valid = "N"
            end

        putfield(agqname:STR_ZIPCODE);
1303    agqname:STR_ZIPCODE/displayonly;

1301    agqname:city/tabstop/uppercase/displayonly
        hide if l_city_valid one of "N", "" ;

1301    begin
        l_str_zipcode = agqname:str_zipcode[1,5] + "0000"
        access sfszipcode_alias, set sfszipcode_alias:company_id       = agqname:company_id,
                                     sfszipcode_alias:state            = l_state,
                                     sfszipcode_alias:line_of_business = g_line_of_business,
                                     sfszipcode_alias:str_zipcode      = l_str_zipcode, generic

        if agqname:city = "" or
           l_prior_zipcode <> agqname:str_zipcode then
            activehelp()
        end
        agqname:city/tabstop/uppercase
        hide if l_city_valid one of "Y", ""

        activehelp/optionlist sfszipcode_alias:acceptable_city[1],
                              if sfszipcode_alias:acceptable_city[2] <> "" then
                                  sfszipcode_alias:acceptable_city[2],
                              if sfszipcode_alias:acceptable_city[3] <> "" then
                                  sfszipcode_alias:acceptable_city[3],
                              if sfszipcode_alias:acceptable_city[4] <> "" then
                                  sfszipcode_alias:acceptable_city[4],
                              if sfszipcode_alias:acceptable_city[5] <> "" then
                                  sfszipcode_alias:acceptable_city[5],
                              if sfszipcode_alias:acceptable_city[6] <> "" then
                                  sfszipcode_alias:acceptable_city[6],
                              if sfszipcode_alias:acceptable_city[7] <> "" then
                                  sfszipcode_alias:acceptable_city[7],
                              if sfszipcode_alias:acceptable_city[8] <> "" then
                                  sfszipcode_alias:acceptable_city[8],
                              if sfszipcode_alias:acceptable_city[9] <> "" then
                                  sfszipcode_alias:acceptable_city[9],
                              if sfszipcode_alias:acceptable_city[10] <> "" then
                                  sfszipcode_alias:acceptable_city[10];

1301    agqname:city/tabstop/uppercase mandatory
        hide if l_city_valid one of "N", "Y" ;

1302    begin
        if agqname:str_state = "" and
           g_line_of_business one of 4 then
            agqname:str_state = "NJ"
        end
        agqname:STR_STATE/displayonly
        hide if sfszipcode:city = ""
        g_str_state = agqname:str_state   ;
1302    begin
        if agqname:str_state = "" and
           g_line_of_business one of 4 then
            agqname:str_state = "NJ"
        end
        agqname:STR_STATE/default/tabstop mandatory
        hide if sfszipcode:city <> ""
        g_str_state = agqname:str_state   ;
1401    l_email_address/default ;
1402    agqname:telephone ;
1501    begin
        if FUNCTION one of "CHANGE" , "CHG" then
            begin
            if l_po_box_1 = 1 then
                agqname:address_same = "N"
            else
            if l_po_box <> "" and
               agqname:address[2] = "" then
                agqname:address_same = "N"
            else
            if agqname:address_same not one of "N", "Y" then
                agqname:address_same = "Y"

            if agqname:str_state <> "NJ" then
                agqname:address_same = "N"
            end
        end
        agqname:address_same/checkbox/values="N,Y"/default/tabstop
        if agqname:str_state <> "NJ" and
           agqname:address_same = "Y" then
            error "State enter for mailing address is not NJ so address the same can not be checked"

        if l_po_box_1 = 1 and
           agqname:address_same = "Y" then
            error "This is a PO Box zipcode so you must enter a valid location address"

        if agqname:company_id = "FARMERS" and
           agqname:address_same = "Y" then
            begin
            do get_sfszipcode
            if l_restricted = 1 then
                begin
                error "This risk is located in a coastal restrictive zip code and cannot be bound or quoted"
                end
            else
            if l_restricted_distance <> 0 then
                begin
                l_continue_1 = dialog("Warning","warning.bmp","You have entered a Zip Code which includes distance to coast eligibility. Please verify distance meets our coastal eligibility before continuing with quote.","OK")
                end
            end

        if agqname:address_same = "N" then
          {
            do check_location
          }
        else
          begin
            do check_territory
            if l_rating_group <> "" then
              {
                do update_agqlocation
              }
            else
              {
                error "Invalid Zip Code Entered"
              }
          end ;

1601    begin
        access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

        l_prior_address_less_then_x_years = agqmailingaddress:if_at_address_less_then_x_years
        end
        l_prior_address_less_then_x_years/checkbox/values="0,1"/default/tabstop
        if l_prior_address_less_then_x_years = 1 then
            begin
            access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

            if agqmailingaddress:app_no <> g_app_no then
                begin
                add agqmailingaddress
                    begin
                    agqmailingaddress:app_no = g_app_no
                    agqmailingaddress:if_at_address_less_then_x_years = 1
                    end
                end

            if agqmailingaddress:prior_house_number = "" and
               agqmailingaddress:prior_street_name = "" and
               agqmailingaddress:prior_city = "" and
               agqmailingaddress:prior_state = "" and
               agqmailingaddress:prior_zip_code = "" then
                begin
                display modal screen "agtmt9002b"
                with initial function "change"
                end

            end
        else
            begin
            access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

            if agqmailingaddress:app_no = g_app_no then
                begin
                change agqmailingaddress
                    begin
                    agqmailingaddress:prior_house_number     = ""
                    agqmailingaddress:prior_street_direction = ""
                    agqmailingaddress:prior_street_name      = ""
                    agqmailingaddress:prior_street_type      = ""
                    agqmailingaddress:prior_street_type_1    = ""
                    agqmailingaddress:prior_apt_number       = ""
                    agqmailingaddress:prior_city             = ""
                    agqmailingaddress:prior_state            = ""
                    agqmailingaddress:prior_zip_code         = ""
                    end
                end
            end

        do write_agqmailingaddress
        access plsdefault, set plsdefault:company_id       = agqname:company_id,
                               plsdefault:line_of_business = agqname:line_of_business, generic

        access agqproperty,
           set agqproperty:app_no = g_app_no, generic

        if agqproperty:app_no <> g_app_no and
           function one of "CHANGE", "CHG" and
           agqpersonal:form one of 3 then
          {
            do call_property_service
          }

        access agqclaim, set agqclaim:app_no = g_app_no, generic

        if agqclaim:app_no <> g_app_no and
           function one of "CHANGE", "CHG" and
           agqpersonal:form one of 3 then
          {
            do call_claim_service
          }

        access agqcreditscore,
           set agqcreditscore:app_no = g_app_no, generic

        access agqpersonal2,
           set agqpersonal2:app_no   = g_app_no, generic

--        warning str(agqcreditscore:app_no)
--        warning str(g_app_no)
--        warning str(agqcreditscore:FIRE_SAFE_SCORE)

        if (agqcreditscore:app_no = g_app_no and
            agqcreditscore:FIRE_SAFE_SCORE = 0) or
            agqcreditscore:app_no <> g_app_no then
          {
            do call_risk_score_webservice
          }


        if agqname:applicant_approved_credit_score = "Y" and
           function one of "CHANGE", "CHG" and
           agqcreditscore:credit_score = 0 then
          {
            do call_web_service
          }

        if agqname:applicant_approved_credit_score = "N" then
            begin
            access agqcreditscore, set agqcreditscore:app_no = g_app_no, generic

            if agqcreditscore:app_no = g_app_no then
                begin
                change agqcreditscore
                    begin
                    agqcreditscore:credit_score = 111
                    end
                end
            else
                begin
                add agqcreditscore
                    begin
                    agqcreditscore:app_no       = g_app_no
                    agqcreditscore:credit_score = 111
                    end
                end
            end;

1601    l_prior_address_less_then_x_years/checkbox/values="0,1"/displayonly
        access agqpersonal, set agqpersonal:app_no = g_app_no, generic

        if agqpersonal:app_no = g_app_no then
            begin
            change agqpersonal
                begin
                agqpersonal:eff_date         = agqname:eff_date
                agqpersonal:exp_date         = agqname:exp_date
                end
            end
        else
            begin
            add agqpersonal
                begin
                agqpersonal:app_no           = g_app_no
                agqpersonal:prem_no          = 1
                agqpersonal:build_no         = 1
                g_prem_no                    = agqpersonal:prem_no
                g_build_no                   = agqpersonal:build_no
                agqpersonal:eff_date         = agqname:eff_date
                agqpersonal:exp_date         = agqname:exp_date
                agqpersonal:entry_date       = todaysdate
                agqpersonal:state            = l_state
                agqpersonal:COUNTY           = agsdefault_plp:COUNTY
                agqpersonal:company_id       = sfsdefault:company_id
                agqpersonal:trans_date       = todaysdate
                agqpersonal:deductible       = agsdefault_plp:deductible
                agqpersonal:no_families      = 1
                agqpersonal:owner_occupied   = "Y"
                agqpersonal:seasonal         = "N"
                agqpersonal:line_of_business = g_line_of_business
                agqpersonal:agent_no         = l_agent_no
                agqpersonal:form             = g_form
                agqpersonal:liability_limit  = agsdefault_plp:coverage_e
                agqpersonal:medical_limit    = agsdefault_plp:coverage_f
                end
            end ;

}

panel at 27,1 to 27,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

Panel at 26,1 to 26,100 Tagged icon_line2_tg
    Properties
        {
        LayoutType = screen
        }
    {
    Components
        Button at 1,25   tagged location_fn
        Properties {
                Iconname = "location_address.bmp"
                }
        Events  {
                Action {
                       function = "location"
                       abort()
                       }
                }

        Button at 1,50   tagged prior_address_fn
        Properties {
                Iconname = "prior_location.bmp"
                }
        Events  {
                Action {
                       function = "prior_location"
                       abort()
                       }
                }

}

Panel at 28,1 to 28,100 Tagged icon_line2_tg
    Properties
        {
        LayoutType = screen
        }
    {
    Components
        Button at 1,5  tagged previousscreen_fn
        Properties {
                Iconname = "previous_screen.bmp"
                }
        Events  {
                Action {
                       function = "previousscreen"
                       abort()
                       }
                }

        Button at 1,40   tagged quotesummary_fn
        Properties {
                Iconname = "quote_summary.bmp"
                }
        Events  {
                Action {
                       function = "quotesummary"
                       abort()
                       }
                }

        Button at 1,75   tagged nextscreen_fn
            Properties
                {
                Iconname = "next_screen.bmp"
                }
            Events
                {
                Action
                    {
                    access agqname_alias, set agqname_alias:app_no = g_app_no, generic

                    access agqpersonal, set agqpersonal:app_no = g_app_no, generic

                    access plsdefault, set plsdefault:company_id       = agqname_alias:company_id,
                                           plsdefault:line_of_business = agqname_alias:line_of_business, generic

                    if --agqname_alias:eff_date >= plsdefault:rating_algorithm_date and
                       --plsdefault:rating_algorithm_date <> 0 and
                       agqpersonal:loss_rents_limit = 0 then
                        begin
                        pause(5000)
                        message "Processing Occurring"
                        if g_form = 3 then
                            begin
                            do check_for_property_characteristics
                            if l_found = "Y" then
                                do property_characteristics
                            do read_agqclaim
                            end
                        do check_agqcreditscore
                        end
                    function = "nextscreen"
                    abort()
                    }
                }

}

panel at 29,1 to 29,100 tagged line_panel_1
    {
    Components
        line at 1,1 to 1,100
            Properties
                {
                Linestyle = embossed
                Linewidth = 5
                foregroundcolor = "black"
                }
    }

panel at 30,1 to 32,100  tagged ficof_fn

Properties
        {
          LayoutType = screen
--          Transparent = False
          backgroundcolor = "white"
        }
{
      Components
         browser at 1,1 to 7,100  tagged helper_tg
             properties {
                          url = ""
                        }
}

}

Update
if UPDATEOK = "NO" Then
    {
    enable(calc_fn)   --in case someone does not change anything on the edit the calc_fn needs to be enabled.
    if agqpersonal:contents_limit <> 0 or
       agqpersonal:dwelling_limit <> 0 then
        begin
        if g_ok_to_continue = "N" then
            disable(quotesummary_fn)
        else
            enable(quotesummary_fn)
        end
    else
        disable(quotesummary_fn)

    enable(back_fn)
    enable(location_fn)
    if agqmailingaddress:if_at_address_less_then_x_years = 1 or
       l_prior_address_less_then_x_years = 1 then
        enable(prior_address_fn)
    else
        disable(prior_address_fn)
    disable(accept_fn)
    access agqname_alias, set agqname_alias:app_no = g_app_no, generic

    if agqname_alias:app_no <> 0 and
       agqname_alias:quote_no = 0 then
        begin
        enable(change_fn)
        end
    else
    if agqname_alias:app_no = 0 then
        begin
        disable(change_fn)
        end

    if agqmailingaddress:if_at_address_less_then_x_years = 0 then
         disable(prior_address_fn)
    else
         enable(prior_address_fn)
    }

If UPDATEOK = "YES" And
   Abort = "NO" Then
    Begin
    enable(calc_fn)
    enable(previousscreen_fn)

    access agqstatus, set agqstatus:app_no = g_app_no, generic

    if agqstatus:app_no <> g_app_no then
        begin
        access agsstatus, set agsstatus:company_id  = agqname:company_id,
                              agsstatus:status_code = 1, generic

        add agqstatus
            begin
            agqstatus:app_no             = g_app_no
            agqstatus:insured_name       = l_name_1
            agqstatus:trans_date         = todaysdate
            agqstatus:status_code        = 1
            agqstatus:status_description = agsstatus:description
            agqstatus:agent_no           = agqpersonal:agent_no
            agqstatus:company_id         = agqpersonal:company_id/raw
            end
        end

    access agqstatusnotes, set agqstatusnotes:app_no = g_app_no, generic

    if agqstatusnotes:app_no <> g_app_no then
        begin
        add agqstatusnotes
            begin
            agqstatusnotes:app_no             = g_app_no
            agqstatusnotes:trans_date         = todaysdate
            agqstatusnotes:sub_code           = 10
            agqstatusnotes:notes              = "Agent has started quote"
            agqstatusnotes:note_created_by    = "agtmt9002"
            agqstatusnotes:status_code        = 1
            end
        end

    if agqpersonal:contents_limit <> 0 or
       agqpersonal:dwelling_limit <> 0 then
        begin
        if g_ok_to_continue = "N" then
            disable(quotesummary_fn)
        else
            enable(quotesummary_fn)
        end
    else
        disable(quotesummary_fn)
    enable(back_fn)
    enable(location_fn)
    if agqmailingaddress:if_at_address_less_then_x_years = 1 or
       l_prior_address_less_then_x_years = 1 then
        enable(prior_address_fn)
    else
        disable(prior_address_fn)
    access agqname_alias, set agqname_alias:app_no = g_app_no, generic

    if agqname_alias:app_no <> 0 and
       agqname_alias:quote_no = 0 then
        begin
        enable(change_fn)
        end
    else
    if agqname_alias:app_no = 0 then
        begin
        disable(change_fn)
        end
    disable(accept_fn)

    if agqmailingaddress:if_at_address_less_then_x_years = 0 then
        disable(prior_address_fn)
    else
        enable(prior_address_fn)

    access agqlocation, set agqlocation:app_no = g_app_no, generic

    l_val_zipcode = agqlocation:zipcode
    l_str_zipcode = agqlocation:str_zipcode[1,5] + "0000"
    access sfszipcode, set sfszipcode:company_id       = agqname:company_id,
                           sfszipcode:state            = l_state,
                           sfszipcode:line_of_business = agqname:line_of_business,
                           sfszipcode:str_zipcode      = l_str_zipcode, generic

    l_tier = 0
    while sfszipcode:company_Id       = agqname:company_id and
          sfszipcode:state            = l_state and
          sfszipcode:line_of_business = agqname:line_of_business and
          sfszipcode:str_zipcode      = l_str_zipcode
            begin
            if (agqname:eff_date >= sfszipcode:eff_date and
               (agqname:eff_date <= sfszipcode:exp_date or
               sfszipcode:exp_date = 0)) then
                begin
                l_tier            = sfszipcode:tier
                end

            next sfszipcode
            end

    l_tier_1 = l_tier
    if l_tier_1 = 0 then
        l_tier_1 = 3
    if agsdefault_plp:dont_use_tier_rating = 1 then
        l_tier_1 = 3
    access sfstier, set sfstier:company_id       = agqname:company_id,
                        sfstier:state            = l_state,
                        sfstier:line_of_business = agqname:line_of_business,
                        sfstier:tier             = l_tier_1, generic

    l_wind_deductible      = 0
    l_hurricane_deductible = 0
    while sfstier:company_Id       = agqname:company_id and
          sfstier:state            = l_state and
          sfstier:line_of_business = agqname:line_of_business and
          sfstier:tier             = l_tier_1
            begin
            if (agqname:eff_date >= sfstier:eff_date and
               (agqname:eff_date <= sfstier:exp_date or
               sfstier:exp_date = 0)) then
                begin
                l_wind_deductible      = sfstier:wind_deductible
                l_hurricane_deductible = sfstier:hurricane_deductible
                end

            next sfstier
            end

    access agqpersonal, set agqpersonal:app_no = g_app_no, generic

    if agqpersonal:app_no = g_app_no then
        begin
        change agqpersonal
            begin
            agqpersonal:wind_deductible      = l_wind_deductible
            if agqpersonal:hurricane_changed = 0 then
                agqpersonal:hurricane_deductible = l_hurricane_deductible
            agqpersonal:tier                 = l_tier_1
            end
        end
    else
        begin
        add agqpersonal
            begin
            agqpersonal:app_no               = g_app_no
            agqpersonal:prem_no              = 1
            agqpersonal:build_no             = 1
            agqpersonal:wind_deductible      = l_wind_deductible
            if agqpersonal:hurricane_changed = 0 then
                agqpersonal:hurricane_deductible = l_hurricane_deductible
            agqpersonal:tier                 = l_tier_1
            end
        end

    function = "redisplay"
    end

Procedure Definition

procedure check_dates
begin
l_days = todaysdate - agqname:policy_date
if l_days <= 2 then
    l_ok_to_show = "Y"
else
    l_ok_to_show = "N"

end

procedure check_arschksu
begin
l_payment_made = "N"
access arschksu, set arschksu:policy_no = agqname:policy_no, using fourth index, generic

if arschksu:policy_no = agqname:policy_no then
    l_payment_made = "Y"

end

procedure make_payment (string p_current_web_page)
BEGIN
l_web_site_address = trun(p_current_web_page)
setproperty(helper_tg,url,trun(l_web_site_address))

END

procedure set_browser

begin
  local string l_unencrypted_string[2000] = "";
  local string l_encrypted_string[3000] = "";
  local string mob_unencrypted_file[26] = "mob_unencryptedaddress.txt";
  local string mob_encrypted_file[24]   = "mob_encryptedaddress.txt";

access agqname, set agqname:app_no = g_app_no, generic

access agqmaster, set agqmaster:app_no = g_app_no, generic

access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

access mobpaymentfile, set mobpaymentfile:company_id = agqname:company_id, generic

l_billing_name  = trun(agqmailingaddress:first_name_1) + "+" + trun(agqmailingaddress:last_name_1)
if agqmailingaddress:house_number <> "" then
    l_address   = trun(agqmailingaddress:house_number)
if agqmailingaddress:street_direction <> "" then
    l_address   = trun(l_address) + "+" +
                  trun(agqmailingaddress:street_direction)
if agqmailingaddress:street_name <> "" then
    l_address   = trun(l_address) + "+" +
                  trun(agqmailingaddress:street_name)
if agqmailingaddress:street_type <> "" then
    l_address   = trun(l_address) + "+" +
                  trun(agqmailingaddress:street_type)
if agqmailingaddress:designation <> "" then
    l_address   = trun(l_address) + "+" +
                  trun(agqmailingaddress:designation)
if agqmailingaddress:apt_number <> "" then
    l_address   = trun(l_address) + "+" +
                  trun(agqmailingaddress:apt_number)
l_city          = trun(agqmailingaddress:mailing_city)
l_str_state     = trun(agqmailingaddress:mailing_state)
l_str_zipcode   = trun(agqmailingaddress:mailing_zipcode)
l_str_policy_no = trun(str(agqname:policy_no))

access sfsagent, set sfsagent:company_id = agqpersonal:company_id,
                     sfsagent:agent_no   = agqpersonal:agent_no, generic

l_installation_id = sfsagent:mob_agent_no
access arsbilling, set arsbilling:company_id = agqname:company_id,
                       arsbilling:policy_no  = agqname:policy_no, generic

l_billing_amount = 0
while arsbilling:company_id = agqname:company_id and
      arsbilling:policy_no  = agqname:policy_no
        begin
        if arsbilling:status = "B" then
            l_billing_amount = arsbilling:installment_amount +
                               l_billing_amount

        next arsbilling
        end

l_billing_amount_1 = str(l_billing_amount,"ZZZZZZ.99")
l_period_at = 1
l_sub = 1
while l_sub < 10
  begin
    l_period_at = pos(".",l_billing_amount_1)
    l_billing_amount_2 = l_billing_amount_1[1,l_period_at - 1] + l_billing_amount_1[l_period_at + 1,len(l_billing_amount_1)]
    l_sub = l_sub + 1
  end

l_period_at = 1
l_sub = 0
l_ctr2 = 0
l_billing_amount_str = str(l_billing_amount_2)
for l_sub = 1 to 10
  begin
      if l_billing_amount_2[l_sub] one of "0","1","2","3","4","5","6","7","8","9" then
      {
         l_ctr2 = l_ctr2 + 1
         l_hold_billing_amount[l_ctr2] = l_billing_amount_2[l_sub]
      }
  end
l_billing_amount_4 = l_hold_billing_amount

l_billing_amount_3 = val(l_billing_amount_2)

l_url = trun(mobpaymentfile:ip_address) +
        trun(mobpaymentfile:wording_1) +
        trun(mobpaymentfile:ssa_params)


l_unencrypted_string = trun(mobpaymentfile:user_wording) +
        "agent" +
        trun(str(sfsagent:agent_no,4)) +
        trun(mobpaymentfile:install_wording) +
        trun(str(l_installation_id)) +
        trun(mobpaymentfile:client_wording) +
        trun(mobpaymentfile:client_code) +
        trun(mobpaymentfile:payment_wording) +
        trun(mobpaymentfile:payment_code) +
        trun(mobpaymentfile:account_no_wording) +
        trun(l_str_policy_no) +
        trun(mobpaymentfile:account_name_wording) +
        trun(l_billing_name) +
        trun(mobpaymentfile:billing_name_wording) +
        trun(l_billing_name) +
        trun(mobpaymentfile:address_wording) +
        trun(l_address) +
        trun(mobpaymentfile:city_wording) +
        trun(l_city) +
        trun(mobpaymentfile:state_wording) +
        trun(l_str_state) +
        trun(mobpaymentfile:zipcode_wording) +
        trun(l_str_zipcode) +
        trun(mobpaymentfile:country_wording) +
        trun(trun(mobpaymentfile:amount_wording) +
        trun(l_billing_amount_4)) +
        trun(mobpaymentfile:email_address) +
        trun(agqpersonal:email) +
        trun(mobpaymentfile:disable_payment_wording) +
        trun(mobpaymentfile:disable_payment_code) +
        trun(mobpaymentfile:disable_schedule_wording) +
        trun(mobpaymentfile:disable_schedule_code) +
        trun(mobpaymentfile:disable_nav) +
        trun(mobpaymentfile:disable_nav_code) +
        trun(mobpaymentfile:disable_store_payment) +
        trun(mobpaymentfile:disable_store_payment_code) +
        trun(mobpaymentfile:calling_server_ip_address)

deletefile(mob_unencrypted_file)
deletefile(mob_encrypted_file)
deletefile("/www/tom.txt")

writefile(mob_unencrypted_file,"%s",trun(l_unencrypted_string))
closefile (mob_unencrypted_file)

if sfsemail:debug_mode = 1 then
  {
    proc( 'java CryptoUtil')
  }
else
  {
    proc( 'java CryptoUtil')/noconsole
  }

readfile(mob_encrypted_file,l_encrypted_string)
l_url = trun(l_url) + l_encrypted_string

if sfsemail:debug_mode = 1 then
  {
    writefile("/www/tom.txt","%s",l_url)
    closefile ("/www/tom.txt")
  }
end

procedure print_policy
begin
access plppersonal, set plppersonal:policy_no = agqname:policy_no, generic

proc("cli sfppolicy.mk")/noconsole
L_USERNAME = USERNAME/raw
access sfppolicy, set sfppolicy:user_id = l_username, approximate

add sfppolicy
    begin
    sfppolicy:user_id               = l_username/raw
    sfppolicy:line_of_business      = plppersonal:line_of_business
    sfppolicy:policy_no             = plppersonal:policy_no
    sfppolicy:pol_year              = plppersonal:pol_year
    sfppolicy:end_sequence          = plppersonal:end_sequence
    sfppolicy:copy_name             = "Copy"
    sfppolicy:company_id            = plppersonal:company_id/raw
    sfppolicy:scan_home_office_copy = 0
    end

do create_policy_macro
end

Procedure CREATE_POLICY_MACRO
Begin
I_CSEXEC_APPLICATION = "PRINT                    "/raw
include "sfscsexec.pro"
Proc(":cli sfpprint1.mk")/noconsole
Proc(":cli sfpprint2.mk")/noconsole
Proc(":cli sfpprint3.mk")/noconsole
Proc(":cli sfpprint4.mk")/noconsole
Proc(":cli sfpprint5.mk")/noconsole

Access SFPPOLICY, Set SFPPOLICY:USER_ID = L_USERNAME, Generic

while SFPPOLICY:USER_ID = L_USERNAME
    begin
    G_POLICY_NO    = SFPPOLICY:POLICY_NO
    G_YEAR         = SFPPOLICY:POL_YEAR
    G_END_SEQUENCE = SFPPOLICY:END_SEQUENCE

    Access SFPMASTER, Set SFPMASTER:POLICY_NO    = G_POLICY_NO,
                          SFPMASTER:POL_YEAR     = G_YEAR,
                          SFPMASTER:END_SEQUENCE = G_END_SEQUENCE, Generic

    Access SFPNAME, Set SFPNAME:POLICY_NO    = G_POLICY_NO,
                        SFPNAME:POL_YEAR     = G_YEAR ,
                        SFPNAME:END_SEQUENCE = G_END_SEQUENCE, Generic

    Access SFSDEFAULT, Set SFSDEFAULT:SFS_CODE = L_SFS_CODE

    access sfsline, set sfsline:company_id       = agqpersonal:company_id,
                        sfsline:line_of_business = agqpersonal:line_of_business,
                        sfsline:lob_subline      = "00", generic

    l_lob_code = sfsline:lob_code
    Access SCIPSCONTROL, Set SCIPSCONTROL:COMPANY_ID = agqpersonal:COMPANY_ID,
                             SCIPSCONTROL:STATE      = agqpersonal:STATE,
                             SCIPSCONTROL:LOB_CODE   = L_LOB_CODE, Exact

    Access SCIPSCONTROL1, Set SCIPSCONTROL1:COMPANY_ID = agqpersonal:COMPANY_ID,
                              SCIPSCONTROL1:STATE      = agqpersonal:STATE,
                              SCIPSCONTROL1:LOB_CODE   = L_LOB_CODE, Exact

    Do ADD_SFPPRINT1

    Do BEGIN_PROCESSING

    Do DELETE_SFPPRINT1

    Do DELETE_SFPPRINT2

    Do DELETE_SFPPRINT3

    Do DELETE_SFPPRINT4

    Do DELETE_SFPPRINT5

    Do UPDATE_SFPNAME

    Delete SFPPOLICY

    Access SFPPOLICY,
       Set SFPPOLICY:USER_ID = L_USERNAME, Approximate

    Next SFPPOLICY
    End

l_app     = "sfs"
L_DEC     = L_APP+Str(I_CSEXEC_NUMBER)+".cq"
L_DEC_PDF = L_APP+Str(I_CSEXEC_NUMBER)+".pdf"

Include "virtualdecs2.pro"
End

Procedure UPDATE_SFPNAME
Begin
Access SFPNAME, Set SFPNAME:POLICY_NO    = G_POLICY_NO,
                    SFPNAME:POL_YEAR     = G_YEAR,
                    SFPNAME:END_SEQUENCE = G_END_SEQUENCE, Generic

If SFPNAME:POLICY_NO    = G_POLICY_NO And
   SFPNAME:POL_YEAR     = G_YEAR And
   SFPNAME:END_SEQUENCE = G_END_SEQUENCE Then
    begin
    Change SFPNAME
        Begin
        SFPNAME:PRINTED = 1
        End
    end

End

Procedure DELETE_SFPPRINT_ALIAS
Begin
Access SFPPRINT_ALIAS, Set SFPPRINT_ALIAS:POLICY_NO    = G_POLICY_NO,
                           SFPPRINT_ALIAS:POL_YEAR     = G_YEAR,
                           SFPPRINT_ALIAS:END_SEQUENCE = G_END_SEQUENCE, Generic

If SFPPRINT_ALIAS:POLICY_NO    = G_POLICY_NO And
   SFPPRINT_ALIAS:POL_YEAR     = G_YEAR And
   SFPPRINT_ALIAS:END_SEQUENCE = G_END_SEQUENCE Then
    Delete SFPPRINT_ALIAS

End

Procedure ADD_SFPPRINT1
Begin
Add SFPPRINT1
    Begin
    SFPPRINT1:POLICY_NO        = G_POLICY_NO
    SFPPRINT1:POL_YEAR         = G_YEAR
    SFPPRINT1:END_SEQUENCE     = G_END_SEQUENCE
    sfpprint1:line_of_business = agqpersonal:line_of_business
    SFPPRINT1:SCAN_HOME_OFFICE = 1
    sfpprint1:copy_name        = "Copy"
    sfpprint1:user_printer     = 0001
    End

End

Procedure DELETE_SFPPRINT1
Begin
Access SFPPRINT1, Set SFPPRINT1:POLICY_NO    = G_POLICY_NO,
                      SFPPRINT1:POL_YEAR     = G_YEAR,
                      SFPPRINT1:END_SEQUENCE = G_END_SEQUENCE, Generic

while sfpprint1:policy_no    = g_policy_no and
      sfpprint1:pol_year     = g_year and
      sfpprint1:end_sequence = g_end_sequence
        begin
        Delete SFPPRINT1

        next sfpprint1
        end

End

Procedure DELETE_SFPPRINT2
Begin

Access SFPPRINT2, Set SFPPRINT2:POLICY_NO    = G_POLICY_NO,
                      SFPPRINT2:POL_YEAR     = G_YEAR,
                      SFPPRINT2:END_SEQUENCE = G_END_SEQUENCE, Generic

while SFPPRINT2:POLICY_NO    = G_POLICY_NO and
      SFPPRINT2:POL_YEAR     = G_YEAR and
      SFPPRINT2:END_SEQUENCE = G_END_SEQUENCE
    begin
    Delete SFPPRINT2

    Next SFPPRINT2
    End

End

Procedure DELETE_SFPPRINT3
Begin
Access SFPPRINT3, Set SFPPRINT3:POLICY_NO    = G_POLICY_NO,
                      SFPPRINT3:POL_YEAR     = G_YEAR,
                      SFPPRINT3:END_SEQUENCE = G_END_SEQUENCE, Generic

while SFPPRINT3:POLICY_NO    = G_POLICY_NO and
      SFPPRINT3:POL_YEAR     = G_YEAR and
      SFPPRINT3:END_SEQUENCE = G_END_SEQUENCE
    begin
    Delete SFPPRINT3

    Next SFPPRINT3
    End

End

Procedure DELETE_SFPPRINT4
Begin
Access SFPPRINT4, Set SFPPRINT4:POLICY_NO    = G_POLICY_NO,
                      SFPPRINT4:POL_YEAR     = G_YEAR,
                      SFPPRINT4:END_SEQUENCE = G_END_SEQUENCE, Generic


while SFPPRINT4:POLICY_NO    = G_POLICY_NO and
      SFPPRINT4:POL_YEAR     = G_YEAR and
      SFPPRINT4:END_SEQUENCE = G_END_SEQUENCE
    begin
    Delete SFPPRINT4

    Next SFPPRINT4
    End

End

Procedure DELETE_SFPPRINT5
Begin
Access SFPPRINT5, Set SFPPRINT5:POLICY_NO    = G_POLICY_NO,
                      SFPPRINT5:POL_YEAR     = G_YEAR,
                      SFPPRINT5:END_SEQUENCE = G_END_SEQUENCE, Generic

while SFPPRINT5:POLICY_NO    = G_POLICY_NO and
      SFPPRINT5:POL_YEAR     = G_YEAR and
      SFPPRINT5:END_SEQUENCE = G_END_SEQUENCE
    begin
    Delete SFPPRINT5

    Next SFPPRINT5
    End

End

Procedure BEGIN_PROCESSING
Begin
l_commandline_1 = str(0001,4) + str(i_csexec_number)
do process_invoice
If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli csbatch plspr400 %s",L_COMMANDLINE_1)/noconsole
else
    Proc("cli csbatch plspr400 %s",L_COMMANDLINE_1)

end

Procedure PROCESS_INVOICE
Begin
l_app       = "sfs"
L_MACRO     = L_APP + Trun(Str(I_CSEXEC_NUMBER)) + ".mf"
L_DEC       = L_APP + Trun(Str(I_CSEXEC_NUMBER)) + ".cq"
L_PARAMETER = "sfpdecssfp.par"

Deletefile(L_PARAMETER)
Writefile (L_PARAMETER,"%d",SFPNAME:EFF_DATE)
Writefile (L_PARAMETER,"<nl>")
Writefile (L_PARAMETER,"%d",SFPNAME:EXP_DATE)
Writefile (L_PARAMETER,"<nl>")
Closefile (L_PARAMETER)

proc("cli rm arspr01c.pcl")/noconsole

L_REPORT = "arspr01c"
L_AR_COMMAND_LINE = "2"+Str(SFPNAME:EFF_DATE,"MMDDYYYY") +
                        Str(SFPNAME:EXP_DATE,"MMDDYYYY") +
                        Str(SFPNAME:POLICY_NO,"999999999") +
                        "0" + "0" + L_REPORT[1,8] + "00" +
                        str(sfpmaster:trans_code,"99")/spacefill

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Begin
    Proc ("cli csbatch arsup930 %s",L_AR_COMMAND_LINE)/noconsole
    Proc ("cli joinit %s.pcl %s<nl>",Trun(L_REPORT),Trun(L_DEC))/noconsole
    End
Else
    Begin
    Proc ("cli csbatch arsup930 %s",L_AR_COMMAND_LINE)
    Proc ("cli joinit %s.pcl %s<nl>",Trun(L_REPORT),Trun(L_DEC))
    End

End

procedure read_agqcreditscore_d11_code
begin
access agqcreditscore,
     set agqcreditscore:app_no = g_app_no, generic

g_ok_to_continue = "Y"
if agqcreditscore:risk_scoring_code[1] one of "D11" or
   agqcreditscore:risk_scoring_code[2] one of "D11" or
   agqcreditscore:risk_scoring_code[3] one of "D11" or
   agqcreditscore:risk_scoring_code[4] one of "D11" then
    begin
    l_continue_1 = dialog("Warning","warning.bmp","Risk is Ineligible due to Bankruptcy.","OK")
    g_ok_to_continue = "N"
    end

end

procedure get_sfszipcode
begin
l_val_zipcode = agqname:zipcode
l_str_zipcode = agqname:str_zipcode[1,5] + "0000"
switch(agqname:str_state)
  case "NJ" : g_state = 29
  case "MD" : g_state = 19
--  default   : g_state = 29
  end
access sfszipcode, set sfszipcode:company_id       = agqname:company_id,
                       sfszipcode:state            = g_state,
                       sfszipcode:line_of_business = agqname:line_of_business,
                       sfszipcode:str_zipcode      = l_str_zipcode, generic

l_tier = 0
while sfszipcode:company_Id       = agqname:company_id and
      sfszipcode:state            = g_state and
      sfszipcode:line_of_business = agqname:line_of_business and
      sfszipcode:str_zipcode      = l_str_zipcode
        begin
        if (agqname:eff_date >= sfszipcode:eff_date and
           (agqname:eff_date <= sfszipcode:exp_date or
           sfszipcode:exp_date = 0)) then
            begin
            l_restricted = sfszipcode:restricted
            l_restricted_distance = sfszipcode:restricted_distance
            end

        next sfszipcode
        end

end

procedure call_risk_score_webservice

BEGIN
--  warning ("I am here")
  do check_environment_risk_score   --sets up the varible l_which_protocol
  do fill_in_risk_score
--  warning "This is call webservice" + str(sfsemail:debug_mode)
  if sfsemail:debug_mode = 0 then
    {
      proc ("cli csbatch webservice_risk_score_agent %s",  L_which_protocol)/noconsole
    }
  else
    {
      proc ("cli csbatch webservice_risk_score_agent %s",  L_which_protocol)
    }
END

Procedure fill_in_risk_score

BEGIN
  access agqlocation,
     set agqlocation:app_no = agqname:app_no, generic

  l_which_protocol = l_which_protocol + "                              "
  access exploredata,
     set exploredata:which_environment  = l_which_protocol,approximate

  if trun(exploredata:which_environment)  = trun(l_which_protocol) then
    {
      change exploredata
        Begin
          exploredata:address             = agqlocation:address
          exploredata:city                = agqlocation:city
          exploredata:str_state           = agqlocation:str_state
          exploredata:zip_code            = agqlocation:str_zipcode[1,5]
          exploredata:first_name          = l_first_name_1
          exploredata:middle_name         = l_middle_initial_1
          exploredata:last_name           = l_last_name_1
          exploredata:app_Quote_policy_no = str(agqname:app_no)
          exploredata:renewal_date        = str(agQNAME:EFF_DATE,"MM/DD/YYYY")
          exploredata:agent_number        = str(agqname:agent_no)
          exploredata:policy_form         = ""
          exploredata:quote_Back          = str(agqname:app_no)
        end
    }
END

procedure check_environment_risk_score

BEGIN
  string l_servername[20];
  string l_servername_and_path[40];
  unsigned ascii number l_loop = 0;

  l_current_path = currentsea
  l_lib7_pos     = pos(":lib7",l_current_path) - 1

  if l_lib7_pos > 0 then
    {
      l_start_dir_pos = l_lib7_pos
      while l_start_dir_pos > 0 and
            l_current_path[l_start_dir_pos] <> ":"
        {
          l_start_dir_pos = l_start_dir_pos - 1
        }

      l_current_environment = l_current_path[l_start_dir_pos + 1,l_lib7_pos]      --the + moves over the : the lines assigned the directory
    }

  l_servername = HOSTNAME
  l_servername_and_path = trun(l_servername) + ":" + trun(l_current_environment)

  switch (l_servername_and_path)
    case "linux02:farmers" : l_which_protocol = "RISK_SCORE_LIVE"   --make sure they are on live system only and
    default                : l_which_protocol = "RISK_SCORE_TEST"
  end
END

procedure check_territory
begin
switch(agqname:str_state)
  case "NJ" : l_state = 29
  case "MD" : l_state = 19
  end

l_zipcode_5 = val(agqname:str_zipcode[1,5])
access hraterritory, set hraterritory:company_id       = agqname:company_id,
                         hraterritory:state            = l_state,
                         hraterritory:line_of_business = agqname:line_of_business,
                         hraterritory:form             = g_form,
                         hraterritory:zipcode_5        = l_zipcode_5, generic

l_rating_group = ""
while hraterritory:company_id       = agqname:company_id and
      hraterritory:state            = l_state and
      hraterritory:line_of_business = agqname:line_of_business and
      hraterritory:form             = g_form and
      hraterritory:zipcode_5        = l_zipcode_5
        begin
        if (agqname:eff_date >= hraterritory:eff_date and
           (agqname:eff_date <= hraterritory:exp_date or
           hraterritory:exp_date = 0)) then
            begin
            l_rating_group     = hraterritory:rating_group
            end

        next hraterritory
        end

end

procedure check_for_property_characteristics
begin
access agqproperty, set agqproperty:app_no = agqpersonal:app_no, generic

l_found = "N"
message("Please Wait, Processing Occuring")
while l_found = "N"
    begin
    access agqproperty, set agqproperty:app_no = agqpersonal:app_no, generic

    if agqproperty:updated = 1 then
        begin
        l_found = "Y"
        message("")
        end

    end

end

procedure property_characteristics
begin
access agqproperty, set agqproperty:app_no = agqpersonal:app_no, generic

if /*agqproperty:st_number    = agqlocation:st_number and
   agqproperty:st_direction = agqlocation:st_direction and
   agqproperty:street       = agqlocation:street and
   agqproperty:st_type      = agqlocation:st_type and
   agqproperty:city         = agqlocation:city and
   agqproperty:str_state    = agqlocation:str_state and
   agqproperty:zipcode      = agqlocation:zipcode and
   agqproperty:apt_no       = agqlocation:apt_number and*/
   agqproperty:app_no     = agqpersonal:app_no then
    begin
    l_state            = agqpersonal:state
    l_company_id       = agqpersonal:company_id
    l_line_of_business = agqpersonal:line_of_business
    l_heat_type        = agqproperty:heating_type
    access hraheattype, set hraheattype:company_id       = l_company_id,
                            hraheattype:state            = l_state,
                            hraheattype:line_of_business = l_line_of_business,
                            hraheattype:heat_type        = l_heat_type, generic

    l_roof_type_desc = agqproperty:roof_type
    access hraroofcover, set hraroofcover:company_id       = l_company_id,
                             hraroofcover:state            = l_state,
                             hraroofcover:line_of_business = l_line_of_business,
                             hraroofcover:roof_cover       = l_roof_type_desc, generic

    l_construction_type = agqproperty:construction_type
    access hravalidconstruct, set hravalidconstruct:company_id               = l_company_id,
                                  hravalidconstruct:state                    = l_state,
                                  hravalidconstruct:line_of_business         = l_line_of_business,
                                  hravalidconstruct:construction_description = l_construction_type, generic

    access sfsstate, set sfsstate:company_id = l_company_id,
                         sfsstate:state      = l_state, generic

    l_county = 0
    l_county_name = agqproperty:county_name
    while sfsstate:company_id = l_company_id and
          sfsstate:state      = l_state
           begin
           if sfsstate:description = l_county_name then
               l_county = sfsstate:county

           next sfsstate
           end

    l_year_built   = agqproperty:year_built
    l_no_stories   = agqproperty:no_stories
    if l_no_stories = 0 then
        l_no_stories = 1
    l_no_units     = agqproperty:no_units
    l_no_bathrooms = agqproperty:no_bathrooms
    l_wood_stove   = hraheattype:wood_stove
    l_oil_heat     = hraheattype:oil_heat
    l_roof_type    = hraroofcover:roof_type
    if l_roof_type = 0 then
        l_roof_type = 1
    l_construction = hravalidconstruct:construction
    l_square_feet  = agqproperty:square_feet
    l_construction_type_1 = hravalidconstruct:e2value_type
    switch(agqproperty:pool)
      case "Y" : l_swimming_pool = 1
      default  : l_swimming_pool = 0
      end
    end

access agqpersonal, set agqpersonal:app_no = g_app_no, generic

if agqpersonal:app_no   = g_app_no then
    begin
    change agqpersonal
        begin
        if (agqpersonal:year_construction = 0 or
           (agqpersonal:year_construction <> l_year_built and
           l_year_built <> 0)) then
            agqpersonal:year_construction = l_year_built
        if (agqpersonal:county = 0 or
           (agqpersonal:county <> l_county and
           l_county <> 0)) then
            agqpersonal:county            = l_county
        if (agqpersonal:construction = 0 or
           (agqpersonal:construction <> l_construction and
           l_construction <> 0)) then
            agqpersonal:construction      = l_construction
        end
    end
else
    begin
    add agqpersonal
        begin
        agqpersonal:app_no            = g_app_no
        agqpersonal:prem_no           = 1
        agqpersonal:build_no          = 1
        agqpersonal:year_construction = l_year_built
        agqpersonal:county            = l_county
        agqpersonal:construction      = l_construction
        end
    end

access agqpersonal2,
   set agqpersonal2:app_no   = g_app_no, generic

if agqpersonal2:app_no   = agqpersonal:app_no then
    begin
    change agqpersonal2
        begin
        if agqpersonal2:swimming_pool_fenced = 0 then
            agqpersonal2:swimming_pool_fenced = l_swimming_pool
        if agqpersonal2:oil_heat = 0 then
            agqpersonal2:oil_heat         = l_oil_heat
        if agqpersonal2:wood_stove = 0 then
            agqpersonal2:wood_stove       = l_wood_stove
        agqpersonal2:leed_certified       = l_leed_certified
        agqpersonal2:no_bathrooms         = l_no_bathrooms
--        if agqpersonal2:no_bathrooms = 0 then
--            agqpersonal2:no_bathrooms = 1
        agqpersonal2:no_stories           = l_no_stories
        if agqpersonal2:no_stories = 0 then
            agqpersonal2:no_stories = 1
        agqpersonal2:roof_type            = l_roof_type
        if agqpersonal2:roof_type = 0 then
            agqpersonal2:roof_type = 1
        agqpersonal2:no_units             = l_no_units
        if agqpersonal2:construction_type = 0 then
            agqpersonal2:construction_type    = l_construction_type_1
        end
    end
else
    begin
    add agqpersonal2
        begin
        agqpersonal2:app_no               = g_app_no
        agqpersonal2:prem_no              = 1
        agqpersonal2:build_no             = 1
        if agqpersonal2:swimming_pool_fenced = 0 then
            agqpersonal2:swimming_pool_fenced = l_swimming_pool
        if agqpersonal2:oil_heat = 0 then
            agqpersonal2:oil_heat         = l_oil_heat
        if agqpersonal2:wood_stove = 0 then
            agqpersonal2:wood_stove       = l_wood_stove
        agqpersonal2:leed_certified       = l_leed_certified
        agqpersonal2:no_bathrooms         = l_no_bathrooms
--        if agqpersonal2:no_bathrooms = 0 then
--            agqpersonal2:no_bathrooms = 1
        agqpersonal2:no_stories           = l_no_stories
        if agqpersonal2:no_stories = 0 then
            agqpersonal2:no_stories = 1
        agqpersonal2:roof_type            = l_roof_type
        if agqpersonal2:roof_type = 0 then
            agqpersonal2:roof_type = 1
        agqpersonal2:no_units             = l_no_units
        if agqpersonal2:construction_type = 0 then
            agqpersonal2:construction_type    = l_construction_type_1
        end
    end

end

procedure read_agqclaim
begin
access agqclaim, set agqclaim:app_no = g_app_no, generic

l_major_loss_found = 0
l_minor_loss_found = 0
l_no_major_losses_found = 0
l_no_minor_losses_found = 0
while agqclaim:app_no = g_app_no
    begin
    l_claim_year = year(agqname:eff_date) - year(agqclaim:loss_date)
    if ((l_claim_year < 3 or
       (l_claim_year = 3 and
       month(agqclaim:loss_date) >= month(agqname:eff_date))) and
       agqclaim:policy_type one of "HO", "H" and
       agqclaim:name <> "INSURED NAME DIFFERENT" and
       agqclaim:loss_amount not one of "", "0", "$0") then
--       val(agqclaim:loss_street_number) = agqlocation:st_number and
--       agqclaim:loss_street_name = agqlocation:street and
--       agqclaim:loss_street_type = agqlocation:st_type and
--       agqclaim:loss_apartment = agqlocation:apt_number and
--       agqclaim:loss_city = agqlocation:city and
--       agqclaim:loss_state = agqlocation:str_state and
--       agqclaim:loss_zipcode[1,5] = agqlocation:str_zipcode[1,5] then
        begin
        l_continue = "N"
        if l_claim_year = 3 and
           month(agqclaim:loss_date) = month(agqname:eff_date) and
           day(agqclaim:loss_date) >= day(agqname:eff_date) then
            l_continue = "Y"

        if l_claim_year = 3 and
           month(agqclaim:loss_date) > month(agqname:eff_date) then
            l_continue = "Y"

        if l_claim_year < 3 then
            l_continue = "Y"

        if l_continue = "Y" then
            begin
            l_claim_type = agqclaim:claim_type
            access sfsclaimtypes, set sfsclaimtypes:company_id       = agqpersonal:company_id,
                                      sfsclaimtypes:state            = agqpersonal:state,
                                      sfsclaimtypes:line_of_business = agqpersonal:line_of_business,
                                      sfsclaimtypes:claim_type       = l_claim_type, generic

            while sfsclaimtypes:company_id       = agqpersonal:company_id and
                  sfsclaimtypes:state            = agqpersonal:state and
                  sfsclaimtypes:line_of_business = agqpersonal:line_of_business and
                  sfsclaimtypes:claim_type       = l_claim_type
                begin
                if (agqname:eff_date >= sfsclaimtypes:eff_date and
                   (agqname:eff_date <= sfsclaimtypes:exp_date or
                   sfsclaimtypes:exp_date = 0)) then
                    begin
                    if sfsclaimtypes:major_loss = 1 then
                        l_no_major_losses_found = l_no_major_losses_found + 1
                    else
                        l_no_minor_losses_found = l_no_minor_losses_found + 1
                    end

                next sfsclaimtypes
                end
            end

        end

    next agqclaim
    end

access agqpersonal2, set agqpersonal2:app_no   = agqpersonal:app_no,
                         agqpersonal2:prem_no  = agqpersonal:prem_no,
                         agqpersonal2:build_no = agqpersonal:build_no, generic

if agqpersonal2:app_no   = agqpersonal:app_no and
   agqpersonal2:prem_no  = agqpersonal:prem_no and
   agqpersonal2:build_no = agqpersonal:build_no then
    begin
    change agqpersonal2
        begin
        if l_no_major_losses_found <> 0 then
            agqpersonal2:major_loss_found = l_no_major_losses_found
        if l_no_minor_losses_found <> 0 then
            agqpersonal2:minor_loss_found = l_no_minor_losses_found
        end
    end
else
    begin
    add agqpersonal2
        begin
        agqpersonal2:app_no               = agqpersonal:app_no
        agqpersonal2:prem_no              = agqpersonal:prem_no
        agqpersonal2:build_no             = agqpersonal:build_no
        if l_no_major_losses_found <> 0 then
            agqpersonal2:major_loss_found     = l_no_major_losses_found
        if l_no_minor_losses_found <> 0 then
            agqpersonal2:minor_loss_found     = l_no_minor_losses_found
        end
    end

end

procedure update_agqlocation
begin
access agqlocation, set agqlocation:app_no = g_app_no, generic

if agqlocation:app_no = g_app_no then
    begin
    change agqlocation
        begin
        agqlocation:st_number_str        = l_house_number
        agqlocation:st_direction         = l_street_direction
        agqlocation:street               = l_street_name
        agqlocation:st_type              = l_street_type
        agqlocation:designation          = l_designation
        agqlocation:apt_number           = l_apt_number
        agqlocation:address              = agqname:address[1]
        agqlocation:address1[1]          = agqname:address[2]
        agqlocation:city                 = agqname:city
        agqlocation:str_state            = agqname:str_state
        agqlocation:str_zipcode          = agqname:str_zipcode
        agqlocation:line_of_business     = agqname:line_of_business
        agqlocation:trans_date           = agqname:trans_date
        agqlocation:eff_date             = agqname:eff_date
        agqlocation:exp_date             = agqname:exp_date
        end
    end
else
    begin
    add agqlocation
        begin
        agqlocation:app_no               = agqname:app_no
        agqlocation:prem_no              = 1
        agqlocation:build_no             = 1
        agqlocation:sub_code             = 10
        agqlocation:st_number_str        = l_house_number
        agqlocation:st_direction         = l_street_direction
        agqlocation:street               = l_street_name
        agqlocation:st_type              = l_street_type
        agqlocation:address              = agqname:address[1]
        agqlocation:address1[1]          = agqname:address[2]
        agqlocation:city                 = agqname:city
        agqlocation:str_state            = agqname:str_state
        agqlocation:str_zipcode          = agqname:str_zipcode
        agqlocation:line_of_business     = agqname:line_of_business
        agqlocation:trans_date           = agqname:trans_date
        agqlocation:eff_date             = agqname:eff_date
        agqlocation:exp_date             = agqname:exp_date
        end
    end

end

procedure check_location

begin
  access agqlocation,
     set agqlocation:app_no = g_app_no, generic

  if agqlocation:app_no <> g_app_no then
    begin
      g_eff_date = agqname:eff_date
      display modal screen "agtmt9002a"
      with initial function "ADD|EXIT"
    end
end

procedure change_agqname
begin
if l_last_name_1 = l_last_name_2 then
    begin
    l_name_2 = ""
    if l_middle_initial_1 <> "" and
       l_middle_initial_2 <> "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " " +
                   trun(l_middle_initial_1) +
                   " & " +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_middle_initial_1 <> "" and
       l_middle_initial_2 = "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " " +
                   trun(l_middle_initial_1) +
                   " & " +
                   trun(l_first_name_2)
        end
    else
    if l_middle_initial_1 = "" and
       l_middle_initial_2 <> "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " & " +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_middle_initial_1 = "" and
       l_middle_initial_2 = "" then
        begin
        l_name_1 = trun(l_last_name_1) +
                   "=" +
                   trun(l_first_name_1) +
                   " & " +
                   trun(l_first_name_2)
        end
    end
else
if l_last_name_1 <> l_last_name_2 then
    begin
    l_name_1 = trun(l_last_name_1) +
               "=" +
               trun(l_first_name_1) +
               " " +
               trun(l_middle_initial_1)
    if l_last_name_2 <> "" then
        begin
        l_name_2 = trun(l_last_name_2) +
                   "=" +
                   trun(l_first_name_2) +
                   " " +
                   trun(l_middle_initial_2)
        end
    else
    if l_last_name_2 = "" then
        begin
        l_name_2 = ""
        end
    end

agqname:name[1] = l_name_1
agqname:name[2] = l_name_2
if agqname:name[2] = "" and
   l_name_3 <> "" then
    agqname:name[2] = l_name_3
else
if agqname:name[2] <> "" and
   l_name_3 <> "" then
    agqname:name[3] = l_name_3

/*access agqname_alias, set agqname_alias:app_no = g_app_no, generic

if agqname_alias:app_no = g_app_no then
    begin
    if l_name_1 <> "" then
        begin
        change agqname_alias
            begin
            agqname_alias:name[1] = l_name_1
            agqname_alias:name[2] = l_name_2
            end
        end
    end*/


access agqpersonal, set agqpersonal:app_no = g_app_no, generic

if agqpersonal:app_no = g_app_no then
    begin
    change agqpersonal
        begin
        agqpersonal:business_name[1] = l_name_1
        end
    end

end

procedure call_web_service

BEGIN
  unsigned ascii number l_ready_for_credit_check[2];
  l_ready_for_credit_check = 0

  do write_agqmailingaddress
  do check_environment   --sets up the varible l_which_protocol
  do fill_in_iix_transunion_score
  access agqcreditscore,
     set agqcreditscore:app_no = agqname:app_no, exact

  l_ready_for_credit_check = check_required_fields_for_credit_Score()
  if l_ready_for_credit_check <> 0 then
    begin
      switch (l_ready_for_credit_check)
        case 1 : warning "Missing Last Name Default credit score will be given"
        case 2 : warning "Missing First Name Default credit score will be given"
        case 3 : warning "Missing House Number If NONE put in the number one"
        case 4 : warning "Missing Street Name Default Credit Score will be given"
        case 5 : warning "Missing City Name Default Credit Score will be given"
        case 6 : warning "Missing State Name Default Credit Score will be given"
        case 7 : warning "Missing Zip Code Default Credit Score will be given"
      end
    end
else

if --function one of "CHANGE", "CHG" and
   agqname:company_id = "FARMERS" and
   agqcreditscore:CREDIT_SCORE = 0 and
   agqcreditscore:DATE_CREDIT_SCORED_RECEIVED = 0000.00.00 then
    begin
    do check_environment
    if agqname:eff_date >= plsdefault:rating_algorithm_date and
       plsdefault:rating_algorithm_date <> 0 then
        begin
        if sfsemail:debug_mode = 0 then
          {
            Proc("cli csbatch %s %s%s","webservice_agent",str(g_app_no,"99999999999"),l_which_protocol)/noconsole/background
          }
        else
          {
            Proc("cli csbatch %s %s%s","webservice_agent",str(g_app_no,"99999999999"),l_which_protocol)
          }
        message ("Processing . . . Please continue with quote")
        end
    if agqcreditscore:app_no = agqname:app_no and
       agqcreditscore:credit_score <> 0 then
        message ("                                           ")
    end

END

procedure call_claim_service
BEGIN
unsigned ascii number l_ready_for_claim_check[2];
l_ready_for_claim_check = 0

if l_dont_get_credit_score = 1 or
   l_refused_credit_score  = 1 then
    do write_agqmailingaddress
do check_environment_claim   --sets up the varible l_which_protocol_1
do fill_in_iix_individual_claims
access agqcreditscore,
   set agqcreditscore:app_no = agqname:app_no, exact

l_ready_for_claim_check = check_required_fields_for_claims()
if l_ready_for_claim_check <> 0 then
    begin
    switch (l_ready_for_claim_check)
      case 1 : warning "Missing Last Name"
      case 2 : warning "Missing First Name"
      case 3 : warning "Missing House Number"
      case 4 : warning "Missing Street Name"
      case 5 : warning "Missing City Name"
      case 6 : warning "Missing State Name"
      case 7 : warning "Missing Zip Code"
      end
    end
else
if function one of "CHANGE", "CHG" and
   agqname:company_id = "FARMERS" and
   agqcreditscore:claims_checked = 0 and
   agqcreditscore:DATE_claims_checked = 0000.00.00 then
    begin
    do check_environment_claim
    if agqname:eff_date >= plsdefault:rating_algorithm_date and
       plsdefault:rating_algorithm_date <> 0 then
        begin
        if sfscompany:debug_mode = 0 then
            Proc("cli /software/shells/get_claims_agent.sh %s %s %s",l_current_environment,str(g_app_no,11),l_which_Protocol_1)/noconsole/background
        else
            Proc("cli /software/shells/get_claims_agent.sh %s %s %s",l_current_environment,str(g_app_no,11),l_which_Protocol_1)
        message ("Processing . . . Please continue with quote")
        do read_in_claim_results    --most likely it will not read the result in here but i HAVE TO have it. it will not be ready.
        end
    if agqcreditscore:app_no = agqname:app_no and
       agqcreditscore:claims_checked <> 0 then
        message ("                                           ")
    end

END

procedure call_property_service

BEGIN
unsigned ascii number l_ready_for_property_check[2];
l_ready_for_property_check = 0

if l_dont_get_credit_score = 1 or
   l_refused_credit_score  = 1 then
  {
    do write_agqmailingaddress
  }
do check_environment_property   --sets up the varible l_which_protocol_1
do fill_in_iix_property_char
access agqcreditscore,
     set agqcreditscore:app_no = agqname:app_no, exact

--l_ready_for_property_check = check_required_fields_for_property_characteristics()
if l_ready_for_property_check <> 0 then
    begin
    switch (l_ready_for_property_check)
      case 1 : warning "Missing Last Name"
      case 2 : warning "Missing First Name"
      case 3 : warning "Missing House Number"
      case 4 : warning "Missing Street Name"
      case 5 : warning "Missing City Name"
      case 6 : warning "Missing State Name"
      case 7 : warning "Missing Zip Code"
      end
    end
else
if function one of "CHANGE", "CHG" and
   agqname:company_id = "FARMERS" and
   agqcreditscore:property_checked = 0 and
   agqcreditscore:DATE_property_checked = 0000.00.00 then
    begin
    do check_environment_property
    if agqname:eff_date >= plsdefault:rating_algorithm_date and
       plsdefault:rating_algorithm_date <> 0 then
        begin
        if sfscompany:debug_mode = 0 then
            Proc("cli /software/shells/get_property_agent.sh %s %s %s",l_current_environment,str(g_app_no,11),l_which_Protocol_1)/noconsole/background
        else
            Proc("cli /software/shells/get_property_agent.sh %s %s %s",l_current_environment,str(g_app_no,11),l_which_Protocol_1)
        message ("Processing . . . Please continue with quote")
        do read_in_property_results    --most likely it will not read the result in here but i HAVE TO have it. it will not be ready.
        end
    if agqcreditscore:app_no = agqname:app_no and
       agqcreditscore:property_checked <> 0 then
        message ("                                           ")
    end

END

procedure check_environment
BEGIN
string l_servername[20];
string l_servername_and_path[40];
unsigned ascii number l_loop = 0;

l_current_path = currentsea
l_lib7_pos     = pos(":lib7",l_current_path) - 1

if l_lib7_pos > 0 then
    {
    l_start_dir_pos = l_lib7_pos
    while l_start_dir_pos > 0 and
          l_current_path[l_start_dir_pos] <> ":"
        {
        l_start_dir_pos = l_start_dir_pos - 1
        }

    l_current_environment = l_current_path[l_start_dir_pos + 1,l_lib7_pos]      --the + moves over the : the lines assigned the directory
    }

l_servername = HOSTNAME
l_servername_and_path = trun(l_servername) + ":" + trun(l_current_environment)

switch (l_servername_and_path)
  case "linux02:farmers" : l_which_protocol = "CREDIT_SCORE_LIVE"   --make sure they are on live system only and
  default                : l_which_protocol = "CREDIT_SCORE_TEST"
  end

END

procedure check_environment_claim
BEGIN
string l_servername[20];
string l_servername_and_path[40];
unsigned ascii number l_loop = 0;

l_current_path = currentsea
l_lib7_pos     = pos(":lib7",l_current_path) - 1

if l_lib7_pos > 0 then
    {
    l_start_dir_pos = l_lib7_pos
    while l_start_dir_pos > 0 and
          l_current_path[l_start_dir_pos] <> ":"
        {
        l_start_dir_pos = l_start_dir_pos - 1
        }

    l_current_environment = l_current_path[l_start_dir_pos + 1,l_lib7_pos]      --the + moves over the : the lines assigned the directory
    }

l_servername = HOSTNAME
l_servername_and_path = trun(l_servername) + ":" + trun(l_current_environment)

switch (l_servername_and_path)
  case "linux02:farmers" : l_which_protocol_1 = "CLAIM_LIVE"   --make sure they are on live system only and
  default                : l_which_protocol_1 = "CLAIM_TEST"
  end

END

procedure check_environment_property

BEGIN
string l_servername[20];
string l_servername_and_path[40];
unsigned ascii number l_loop = 0;

l_current_path = currentsea
l_lib7_pos     = pos(":lib7",l_current_path) - 1

if l_lib7_pos > 0 then
    {
    l_start_dir_pos = l_lib7_pos
    while l_start_dir_pos > 0 and
          l_current_path[l_start_dir_pos] <> ":"
        {
        l_start_dir_pos = l_start_dir_pos - 1
        }

    l_current_environment = l_current_path[l_start_dir_pos + 1,l_lib7_pos]      --the + moves over the : the lines assigned the directory
    }

l_servername = HOSTNAME
l_servername_and_path = trun(l_servername) + ":" + trun(l_current_environment)

switch (l_servername_and_path)
  case "linux02:farmers" : l_which_protocol_1 = "PROPERTY_LIVE"   --make sure they are on live system only and
  default                : l_which_protocol_1 = "PROPERTY_TEST"
  end

END

procedure Parse_address_line(string p_address)
BEGIN
Array [9] of string l_address_parts[27] ;
local unsigned ascii number l_loop[2];
local unsigned ascii number l_loop1[2];
local unsigned ascii number l_loop2[2];
local unsigned ascii number l_loop5[2];
local unsigned ascii number l_save_loop[2];
local unsigned ascii number l_save1_loop[2];
local unsigned ascii number l_first_time[1];
local string l_trimmed_address[50];
local unsigned ascii number l_found_space[1];

l_found_space             = 0
l_loop                    = 1
l_loop1                   = 1
l_loop5                   = 1
l_house_number            = ""
l_street_direction        = ""
l_street_type             = ""
l_designation             = ""
l_apt_number              = ""
l_street_name             = ""
l_same_as_agqname_address = 0

while l_loop <= len(trun(p_address))
    {
    if p_address[l_loop] = " " and
       l_loop = 1 then                            --do not copy string to the trimmed_address
        {
        --do nothing skip coping the string to the new string  leading space need to be removed
        }
    else
    if p_address[l_loop] = " " and
       l_found_space = 0 then
        {
        l_trimmed_address[l_loop1] = p_address[l_loop]
        l_found_space = 1
        l_loop1 = l_loop1 + 1
        }
    else
    if p_address[l_loop] <> " " then
        {
        l_trimmed_address[l_loop1] = p_address[l_loop]
        l_found_space = 0
        l_loop1 = l_loop1 + 1
        }

    l_loop = l_loop + 1
    }

l_loop = 1
while l_loop <= 9
    {
    l_address_parts[l_loop] = subfield(l_trimmed_address," ",l_loop)
    l_loop = l_loop + 1
    }

l_loop5 = 1
while l_loop5 <= 9 and
      trun(l_address_parts[l_loop5]) <> ""
    {
    l_loop5 = l_loop5 + 1
    }

l_loop = 10    --start out one higher to the l_loop will be at the correct spot
               --I need to check if there is a PO BOX first and put it in the street name

if agqname:address[1] = @"[P] [. O] [A-Z 0-9.# ]*" and      --FIRST ATTEMP OF PATTERN MATCHING.
   pos("BOX",agqname:address[1]) > 0 then
    {
    l_loop = 1
    l_first_time = 0
    while l_loop < l_loop5
        {
        if l_first_time = 0 then
            {
            l_first_time = 1
            L_street_name = trun(l_street_name) + l_address_parts[l_loop]
            }
        else
            {
            L_street_name = trun(l_street_name) + " " + l_address_parts[l_loop]
            }

        l_loop = l_loop + 1
        }
    }
else
    {
    l_street_type = ""
    while L_loop > 1 and
          l_street_type = ""
        {
        l_loop = l_loop - 1
        if trun(l_address_parts[l_loop]) <> "" then
            {
            do parse_street_type(l_address_parts[l_loop])
            }
        }

    if trun(l_street_type) = "" then
        {    --now I need to start from the begining.
        l_loop = 1
        if uppercase(trun(l_address_parts[l_loop])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                           "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {
            do parse_street_direction(l_address_parts[l_loop])
            }
        else
            {
            l_house_number = l_address_parts[l_loop]    --assuming the house number is first.
            }

        l_loop = l_loop + 1
        if uppercase(trun(l_address_parts[l_loop])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                           "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {   --now I need to find the street direction if it is there
            do parse_street_direction(l_address_parts[l_loop])
            }
        else
            {
            l_street_name = l_address_parts[l_loop]
            }

        l_loop = l_loop + 1
        if l_street_name <> "" then
            {
            do parse_designation(l_address_parts[l_loop])   --check for designation like street apt, floor
            l_loop = l_loop + 1
            if l_loop5 > l_loop then      --l_loop5 is the last position that has a value is l_loop5 so the rest goes to the apt number
                {
                l_first_time = 0
                while L_loop <= L_loop5
                    {
                    if l_first_time = 0 then
                        {
                        l_apt_number = TRun(l_apt_number) + l_address_parts[l_loop]
                        l_first_time = 1
                        }
                    else
                        {
                        l_apt_number = TRun(l_apt_number) + " " + l_address_parts[l_loop]
                        }
                    L_loop = L_loop + 1
                    }
                }
            }
        else
            {
            l_street_name = l_address_parts[l_loop]
            l_loop = l_loop + 1
            do parse_designation(l_address_parts[l_loop])   --check for designation like street apt, floor
            l_loop = l_loop + 1
            if l_loop5 > l_loop then      --l_loop5 is the last position that has a value is l_loop5 so the rest goes to the apt number
                {
                l_first_time = 0
                while L_loop <= L_loop5
                    {
                    if l_first_time = 0 then
                        {
                        l_apt_number = TRun(l_apt_number) + l_address_parts[l_loop]
                        l_first_time = 1
                        }
                    else
                        {
                        l_apt_number = TRun(l_apt_number) + " " + l_address_parts[l_loop]
                        }
                    L_loop = L_loop + 1
                    }
                }
            }
        }
    else                                                 ---if the street type is entered.
        {
        l_save_loop = l_loop   --save location in string of address so I can only search before that loop
        l_loop = l_loop5       --start at last position where there was a string value.

        while l_loop > l_save_loop and
              trun(l_designation) = ""
            {
            l_loop = l_loop - 1
            if trun(l_address_parts[l_loop]) <> "" then
                {
                do parse_designation(l_address_parts[l_loop])   --check for designation like street apt floor
                }
            }

        if l_designation <> "" then
            {
            l_save1_loop = l_loop + 1    --this will be the location of the apt
            }

        if trun(l_designation) <> "" then
            {
            if l_save1_loop < l_Loop5 then             --if this is not true then no apt number enter
                {
                l_loop = l_save1_loop            -- the + 1 is to skip over the designation
                                                -- check for apt number this will get me to the location of apt if it exists
                while l_loop <= l_loop5
                    {
                    if UPPERCASE(l_address_parts[l_loop]) <> "" then
                        {
                        l_apt_number = trun(l_apt_number) + trun(l_address_parts[l_loop])
                        }

                    l_loop = l_loop + 1
                    }
                }
            }
        else  -- no apt# floor or suite which is designation
            {
            if l_save_loop + 1 <= l_loop5 then
                {
                l_loop = l_save_loop + 1
                while l_loop <= l_loop5
                    {
                    if UPPERCASE(l_address_parts[l_loop]) <> "" then
                        {
                        l_apt_number = trun(l_apt_number) + trun(l_address_parts[l_loop])
                        }

                    l_loop = l_loop + 1
                    }
                }
            }

        l_loop         = l_save_loop  --at location of what I need to process. anything greater then this loop has been processed.
        l_loop2        = 1
        l_house_number = l_address_parts[l_loop2]   --assumes the first thing in the address is the house number
        l_loop2        = l_loop2 + 1     --currently at the second position in array of string

        l_street_direction = ""
        if uppercase(trun(l_address_parts[l_loop2])) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                                            "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
            {
            access sfsdirection,
              set sfsdirection:company_id = agqname:company_id, generic

            while sfsdirection:company_id = agqname:company_id
                {
                if trun(sfsdirection:description) = l_address_parts[l_loop2] or
                   trun(sfsdirection:direction)   = l_address_parts[l_loop2] then
                    {
                    l_street_direction = sfsdirection:direction
                    }

                next sfsdirection
                }

            l_loop2 = l_loop2 + 1   --at third location
            l_first_time = 1
            l_street_name = ""
            while l_loop2 < l_loop    --l_loop2 is starting from left and l_loop has already got the apt number and street type
                {
                if l_first_time = 1 then
                    {
                    l_first_time = 0
                    l_street_name = trun(l_street_name) + l_address_parts[l_loop2]
                    }
                else
                    {
                    l_street_name = trun(l_street_name) + " " + l_address_parts[l_loop2]
                    }

                l_loop2 = l_loop2 + 1
                }
            }
        else
            {
            l_first_time = 1
            l_street_name = ""
            while l_loop2 < l_loop    --l_loop2 is starting from left and l_loop has already got the apt number and street type
                {
                if l_first_time = 1 then
                    {
                    l_first_time = 0
                    l_street_name = trun(l_street_name) + l_address_parts[l_loop2]
                    }
                else
                    {
                    l_street_name = trun(l_street_name) + " " + l_address_parts[l_loop2]
                    }

                l_loop2 = l_loop2 + 1
                }
            }
        }
    }

END

procedure parse_street_type(string p_street_direction)
BEGIN
access SFSSTRTYPE,
     set SFSSTRTYPE:company_id = agqname:company_id, generic

while sfsstrtype:company_id = agqname:company_id and
      l_street_type = ""
    {
    if trun(p_street_direction) = sfsstrtype:st_type or
       trun(p_street_direction) = sfsstrtype:description then
        {
        l_street_type = sfsstrtype:st_type
        }

    next sfsstrtype
    }

END

procedure parse_street_direction(string p_direction)
BEGIN
l_street_direction = ""
if uppercase(trun(p_direction)) ONE OF "EAST","NORTH","SOUTH","WEST","NORTHEAST","NORTHWEST","SOUTHEAST",   --checking for direction
                                       "SOUTHWEST","E","N","S","W","SW","NW","NE","SE"  then
    {
    access sfsdirection,
          set sfsdirection:company_id = agqname:company_id, generic

    while sfsdirection:company_id = agqname:company_id
        {
        if trun(sfsdirection:description) = p_direction or
           trun(sfsdirection:direction)   = p_direction then
            {
            l_street_direction = sfsdirection:direction
            }

        next sfsdirection
        }
    }

END

Procedure parse_designation(string p_designation)
BEGIN
access sfsdesignation,
     set sfsdesignation:company_id = agqname:company_id, generic

while sfsdesignation:company_id = agqname:company_id and
      l_designation = ""
    {
    if trun(p_designation) = trun(sfsdesignation:designation) then
        {
        l_designation = sfsdesignation:designation
        }

    next sfsdesignation
    }

END

procedure write_agqmailingaddress
BEGIN
access agqmailingaddress,
     set agqmailingaddress:app_no = agqname:app_no, exact

if agqmailingaddress:app_no = agqname:app_no then
    begin
    change agqmailingaddress
        {
        agqmailingaddress:app_no                          = agqname:app_no
        agqmailingaddress:house_number                    = l_house_number
        agqmailingaddress:street_direction                = l_street_direction
        agqmailingaddress:street_name                     = l_street_name

        access SFSSTRTYPE,
             set SFSSTRTYPE:company_id = agqname:company_id,
                 sfsstrtype:ST_TYPE    = l_street_type, generic

        agqmailingaddress:street_type                     = sfsstrtype:tu_st_type    --used because tu_st_type is only two positions
        agqmailingaddress:designation                     = l_designation
        agqmailingaddress:apt_number                      = l_apt_number
        agqmailingaddress:mailing_city                    = agqname:city
        agqmailingaddress:mailing_state                   = agqname:str_state
        agqmailingaddress:mailing_zipcode                 = agqname:str_zipcode
        agqmailingaddress:business_owners_name            = ""
        agqmailingaddress:if_at_address_less_then_x_years = l_prior_address_less_then_x_years
        agqmailingaddress:same_as_sfqname_address         = l_same_as_agqname_address
        agqmailingaddress:last_name_1                     = l_last_name_1
        agqmailingaddress:first_name_1                    = l_first_name_1
        agqmailingaddress:middle_initial_1                = l_middle_initial_1
        agqmailingaddress:last_name_2                     = l_last_name_2
        agqmailingaddress:first_name_2                    = l_first_name_2
        agqmailingaddress:middle_initial_2                = l_middle_initial_2
        agqmailingaddress:name_3                          = l_name_3
        agqmailingaddress:po_box                          = l_po_box
        agqmailingaddress:email_address                   = l_email_address
        }
    END
else
if agqmailingaddress:app_no <> agqname:app_no then
    BEGIN
    add agqmailingaddress
        {
        agqmailingaddress:app_no                          = agqname:app_no
        agqmailingaddress:house_number                    = l_house_number
        agqmailingaddress:street_direction                = l_street_direction
        agqmailingaddress:street_name                     = l_street_name

        access SFSSTRTYPE,
                set SFSSTRTYPE:company_id = agqname:company_id,
                    sfsstrtype:ST_TYPE    = l_street_type, generic

        agqmailingaddress:street_type                     = sfsstrtype:tu_st_type
        agqmailingaddress:designation                     = l_designation
        agqmailingaddress:apt_number                      = l_apt_number
        agqmailingaddress:mailing_city                    = agqname:city
        agqmailingaddress:mailing_state                   = agqname:str_state
        agqmailingaddress:mailing_zipcode                 = agqname:str_zipcode
        agqmailingaddress:business_owners_name            = ""
        agqmailingaddress:if_at_address_less_then_x_years = l_prior_address_less_then_x_years
        agqmailingaddress:same_as_sfqname_address         = l_same_as_agqname_address
        agqmailingaddress:last_name_1                     = l_last_name_1
        agqmailingaddress:first_name_1                    = l_first_name_1
        agqmailingaddress:middle_initial_1                = l_middle_initial_1
        agqmailingaddress:last_name_2                     = l_last_name_2
        agqmailingaddress:first_name_2                    = l_first_name_2
        agqmailingaddress:middle_initial_2                = l_middle_initial_2
        agqmailingaddress:name_3                          = l_name_3
        agqmailingaddress:po_box                          = l_po_box
        agqmailingaddress:email_address                   = l_email_address
        }
    END

END

procedure check_agqcreditscore
BEGIN
access agqcreditscore,
     set agqcreditscore:app_no = g_app_no, generic

access agqpersonal2, set agqpersonal2:app_no   = g_app_no,
                         agqpersonal2:prem_no  = 1,
                         agqpersonal2:build_no = 1, generic

if agqpersonal2:app_no   = g_app_no and
   agqpersonal2:prem_no  = 1 and
   agqpersonal2:build_no = 1 then
    begin
    change agqpersonal2
        begin
        agqpersonal2:credit_score    = agqcreditscore:credit_score
        if agqpersonal2:credit_score = 0 then
            agqpersonal2:credit_score = 999
        if agqcreditscore:fire_safe_score > 0 then
            begin
            if agqcreditscore:fire_safe_score <= 4 then
                agqpersonal2:fire_safe_score = 1
            else
            if agqcreditscore:fire_safe_score <= 8 then
                agqpersonal2:fire_safe_score = 2
            else
            if agqcreditscore:fire_safe_score <= 11 then
                agqpersonal2:fire_safe_score = 3
            else
            if agqcreditscore:fire_safe_score <= 15 then
                agqpersonal2:fire_safe_score = 4
            else
            if agqcreditscore:fire_safe_score <= 16 then
                agqpersonal2:fire_safe_score = 5
            else
            if agqcreditscore:fire_safe_score <= 19 then
                agqpersonal2:fire_safe_score = 6
            else
            if agqcreditscore:fire_safe_score <= 21 then
                agqpersonal2:fire_safe_score = 7
            else
            if agqcreditscore:fire_safe_score <= 24 then
                agqpersonal2:fire_safe_score = 8
            else
            if agqcreditscore:fire_safe_score <= 27 then
                agqpersonal2:fire_safe_score = 9
            else
            if agqcreditscore:fire_safe_score <= 29 then
                agqpersonal2:fire_safe_score = 10
            end
        else
            begin
            agqpersonal2:fire_safe_score = 11
            end
        end
    end
else
    begin
    add agqpersonal2
        begin
        agqpersonal2:app_no          = g_app_no
        agqpersonal2:prem_no         = 1
        agqpersonal2:build_no        = 1
        agqpersonal2:credit_score    = agqcreditscore:credit_score
        if agqpersonal2:credit_score = 0 then
            agqpersonal2:credit_score = 999
        if agqcreditscore:fire_safe_score > 0 then
            begin
            if agqcreditscore:fire_safe_score <= 4 then
                agqpersonal2:fire_safe_score = 1
            else
            if agqcreditscore:fire_safe_score <= 8 then
                agqpersonal2:fire_safe_score = 2
            else
            if agqcreditscore:fire_safe_score <= 11 then
                agqpersonal2:fire_safe_score = 3
            else
            if agqcreditscore:fire_safe_score <= 15 then
                agqpersonal2:fire_safe_score = 4
            else
            if agqcreditscore:fire_safe_score <= 16 then
                agqpersonal2:fire_safe_score = 5
            else
            if agqcreditscore:fire_safe_score <= 19 then
                agqpersonal2:fire_safe_score = 6
            else
            if agqcreditscore:fire_safe_score <= 21 then
                agqpersonal2:fire_safe_score = 7
            else
            if agqcreditscore:fire_safe_score <= 24 then
                agqpersonal2:fire_safe_score = 8
            else
            if agqcreditscore:fire_safe_score <= 27 then
                agqpersonal2:fire_safe_score = 9
            else
            if agqcreditscore:fire_safe_score <= 29 then
                agqpersonal2:fire_safe_score = 10
            end
        else
            begin
            agqpersonal2:fire_safe_score = 11
            end
        end
    end


END

number function check_required_fields_for_credit_Score
BEGIN
unsigned ascii number l_ready_to_go[1] = 0;

access iix_transunion_score,
     set iix_transunion_score:which_protocol = l_which_protocol, approximate

if Trun(iix_transunion_score:last_name) = "" then
    {
    l_ready_to_go = 1
    }
else
if Trun(iix_transunion_score:first_name) = "" then
    {
    l_ready_to_go = 2
    }
else
if Trun(iix_transunion_score:house_number) = "" then
    {
    l_ready_to_go = 3
    }
else
if Trun(iix_transunion_score:street_name) = "" then
    {
    l_ready_to_go = 4
    }
else
if Trun(iix_transunion_score:city_name) = "" then
    {
    l_ready_to_go = 5
    }
else
if Trun(iix_transunion_score:str_state) = "" then
    {
    l_ready_to_go = 6
    }
else
if Trun(iix_transunion_score:zip_code) = "" then
    {
    l_ready_to_go = 7
    }
else
    {
    l_ready_to_go = 0   --all fields above have values in them
    }

return(l_ready_to_go)
END

number function check_required_fields_for_claims

BEGIN

unsigned ascii number l_ready_to_go[1] = 0;

access iix_individual_claims,
   set iix_individual_claims:which_protocol = l_which_protocol_1, approximate

if Trun(iix_individual_claims:last_name) = "" then
  {
    l_ready_to_go = 1
  }
else
  if Trun(iix_individual_claims:first_name) = "" then
    {
      l_ready_to_go = 2
    }
  else
    if Trun(iix_individual_claims:loc_house_number) = "" then
      {
        l_ready_to_go = 3
      }
    else
      if Trun(iix_individual_claims:loc_street_name) = "" then
        {
          l_ready_to_go = 4
        }
     else
       if Trun(iix_individual_claims:loc_city) = "" then
         {
           l_ready_to_go = 5
         }
       else
         if Trun(iix_individual_claims:loc_state) = "" then
           {
             l_ready_to_go = 6
           }
         else
           if Trun(iix_individual_claims:loc_zip) = "" then
             {
               l_ready_to_go = 7
             }
           else
             {
               l_ready_to_go = 0   --all fields above have values in them
             }

return(l_ready_to_go)
END

number function check_required_fields_for_property_characteristics
BEGIN
unsigned ascii number l_ready_to_go[1] = 0;

access iix_property_char,
     set iix_property_char:which_protocol = l_which_protocol_1, approximate

if Trun(iix_property_char:last_name) = "" then
    {
    l_ready_to_go = 1
    }
else
if Trun(iix_property_char:first_name) = "" then
    {
    l_ready_to_go = 2
    }
else
if Trun(iix_property_char:house_number) = "" then
    {
    l_ready_to_go = 3
    }
else
if Trun(iix_property_char:street_name) = "" then
    {
    l_ready_to_go = 4
    }
else
if Trun(iix_property_char:city_name) = "" then
    {
    l_ready_to_go = 5
    }
else
if Trun(iix_property_char:str_state) = "" then
    {
    l_ready_to_go = 6
    }
else
if Trun(iix_property_char:zip_code) = "" then
    {
    l_ready_to_go = 7
    }
else
    {
    l_ready_to_go = 0   --all fields above have values in them
    }

return(l_ready_to_go)
END

procedure fill_in_iix_transunion_score
begin
include "sfsrevname7.var"

access iix_transunion_score,
     set iix_transunion_score:which_protocol = l_which_protocol, approximate

access agqmailingaddress, set agqmailingaddress:app_no = g_app_no, generic

if trun(uppercase(iix_transunion_score:which_protocol)) = trun(l_which_protocol) then
    {
    change iix_transunion_score
        {
        --other fields are optional or already filled in in /data/scratch
        iix_transunion_score:last_name               = l_last_name_1/spacefill
        iix_transunion_score:first_name              = l_first_name_1/spacefill
        if val(agqmailingaddress:house_number) = 0 and
           agqmailingaddress:po_box = "" then
          {
            iix_transunion_score:house_number        = "1"/spacefill
          }
        else
          if val(agqmailingaddress:house_number) = 0 and
                 agqmailingaddress:po_box <> "" then
            {
              iix_transunion_score:house_number        = agqmailingaddress:po_box/spacefill
            }
          else
            {
              iix_transunion_score:house_number        = agqmailingaddress:house_number/spacefill
            }
        iix_transunion_score:ssn                     = str(l_ssn)/spacefill
        iix_transunion_score:street_direction        = agqmailingaddress:street_direction/spacefill
        if agqmailingaddress:po_box <> "" and
           agqmailingaddress:street_name = "" then
            iix_transunion_score:street_name         = "POB " + agqmailingaddress:po_box/spacefill
        else
            iix_transunion_score:street_name         = agqmailingaddress:street_name/spacefill
        iix_transunion_score:street_type             = agqmailingaddress:street_type/spacefill
        iix_transunion_score:apt_number              = agqmailingaddress:apt_number/spacefill
        iix_transunion_score:city_name               = agqmailingaddress:mailing_city/spacefill
        iix_transunion_score:str_state               = agqmailingaddress:mailing_state/spacefill
        iix_transunion_score:zip_code                = agqmailingaddress:mailing_zipcode[1,5] + "-" + agqmailingaddress:mailing_zipcode[6,9]/spacefill
        if val(agqmailingaddress:prior_house_number) = 0 then
            {
            iix_transunion_score:prior_house_number  = "1         "/spacefill
            }
        else
            {
            iix_transunion_score:prior_house_number  = agqmailingaddress:prior_house_number/spacefill
            }
        iix_transunion_score:prior_street_direction  = agqmailingaddress:prior_street_direction/spacefill
        iix_transunion_score:prior_street_name       = agqmailingaddress:prior_street_name/spacefill
        iix_transunion_score:prior_street_type       = agqmailingaddress:prior_street_type_1/spacefill
        iix_transunion_score:prior_apt_number        = agqmailingaddress:prior_apt_number/spacefill
        iix_transunion_score:prior_city              = agqmailingaddress:prior_city/spacefill
        iix_transunion_score:prior_state             = agqmailingaddress:prior_state/spacefill
        iix_transunion_score:prior_zip               = agqmailingaddress:prior_zip_code[1,5] + "-" + agqmailingaddress:prior_zip_code[6,9]/spacefill
        iix_transunion_score:quoteback               = str(g_app_no)/spacefill
        }
    }

END

procedure fill_in_iix_individual_claims
begin
access iix_individual_claims,
     set iix_individual_claims:which_protocol = l_which_protocol_1, generic

access agqlocation, set agqlocation:app_no = g_app_no, generic

if trun(uppercase(iix_individual_claims:which_protocol)) = trun(l_which_protocol_1) then
    {
    change iix_individual_claims
        {
        --other fields are optional or already filled in in /data/scratch
        iix_individual_claims:response_format_code      = "02"
        iix_individual_claims:record_type               = "I"
        iix_individual_claims:quoteback                 = "Farmers of Salem"/spacefill
        iix_individual_claims:block_id_1                = "1"
        iix_individual_claims:last_name                 = l_last_name_1/spacefill
        iix_individual_claims:first_name                = l_first_name_1/spacefill
        iix_individual_claims:middle_initial            = l_middle_initial_1/spacefill
        iix_individual_claims:dob                       = ""/spacefill
        iix_individual_claims:ssn                       = ""/spacefill
        iix_individual_claims:aka_last_name             = ""/spacefill
        iix_individual_claims:aka_first_name            = ""/spacefill
        iix_individual_claims:aka_middle_initial        = ""/spacefill

        iix_individual_claims:block_id_r                = "R"
        iix_individual_claims:loc_house_number          = agqlocation:st_number_str/spacefill
        iix_individual_claims:loc_street_direction      = agqlocation:st_direction/spacefill
        iix_individual_claims:loc_street_name           = agqlocation:street/spacefill

        iix_individual_claims:loc_street_type           = agqlocation:st_type/spacefill
        iix_individual_claims:loc_apt_number            = agqlocation:apt_number/spacefill
        iix_individual_claims:loc_city                  = agqlocation:city/spacefill
        iix_individual_claims:loc_state                 = agqlocation:str_state/spacefill
        iix_individual_claims:loc_zip                   = agqlocation:str_zipcode/spacefill

        iix_individual_claims:block_id_2                = "2"
        iix_individual_claims:last_name_1               = l_last_name_2/spacefill
        iix_individual_claims:first_name_1              = l_first_name_2/spacefill
        iix_individual_claims:middle_initial_1          = l_middle_initial_2/spacefill
        iix_individual_claims:dob_1                     = ""/spacefill
        iix_individual_claims:ssn_1                     = ""/spacefill
        iix_individual_claims:aka_last_name_1           = ""/spacefill
        iix_individual_claims:aka_first_name_1          = ""/spacefill
        iix_individual_claims:aka_middle_initial_1      = ""/spacefill

        iix_individual_claims:block_id_3                = "3"
        iix_individual_claims:prior_policy              = ""/spacefill
        iix_individual_claims:filler                    = ""/spacefill

        iix_individual_claims:block_id_c                = "C"
        if agqmailingaddress:house_number <> "" then
            iix_individual_claims:mailing_house_number  = agqmailingaddress:house_number/spacefill
        else
        if agqmailingaddress:house_number = "" and
           agqmailingaddress:po_box <> "" then
            {
            iix_individual_claims:mailing_house_number  = agqmailingaddress:po_box/spacefill
            }
        iix_individual_claims:mailing_street_direction  = agqmailingaddress:street_direction/spacefill
        if agqmailingaddress:po_box <> "" and
           agqmailingaddress:street_name = "" then
            iix_individual_claims:mailing_street_name   = "POB " + agqmailingaddress:po_box/spacefill
        else
            iix_individual_claims:mailing_street_name   = agqmailingaddress:street_name/spacefill
        iix_individual_claims:mailing_street_type       = agqmailingaddress:street_type/spacefill
        iix_individual_claims:mailing_apt_number        = agqmailingaddress:apt_number/spacefill
        iix_individual_claims:mailing_city              = agqmailingaddress:mailing_city/spacefill
        iix_individual_claims:mailing_state             = agqmailingaddress:mailing_state/spacefill
        iix_individual_claims:mailing_zip               = agqmailingaddress:mailing_zipcode[1,5] + "-" + agqmailingaddress:mailing_zipcode[6,9]/spacefill

        iix_individual_claims:block_id_p                = "P"
        iix_individual_claims:previous_house_number     = agqmailingaddress:prior_house_number/spacefill
        iix_individual_claims:previous_street_direction = agqmailingaddress:prior_street_direction/spacefill
        iix_individual_claims:previous_street_name      = agqmailingaddress:prior_street_name/spacefill
        iix_individual_claims:previous_street_type      = agqmailingaddress:prior_street_type_1/spacefill
        iix_individual_claims:previous_apt_number       = agqmailingaddress:prior_apt_number/spacefill
        iix_individual_claims:previous_city             = agqmailingaddress:prior_city/spacefill
        iix_individual_claims:previous_state            = agqmailingaddress:prior_state/spacefill
        iix_individual_claims:previous_zip              = agqmailingaddress:prior_zip_code[1,5] + "-" + agqmailingaddress:prior_zip_code[6,9]/spacefill
        }
    }

END

procedure fill_in_iix_property_char

begin
  access iix_property_char,
     set iix_property_char:which_protocol = l_which_protocol_1, generic

  access agqlocation,
     set agqlocation:app_no = g_app_no, generic

  access agqpersonal,
     set agqpersonal:app_no = g_app_no, generic

  l_state  = agqpersonal:state
  l_county = agqpersonal:county

  access sfsstate,
     set sfsstate:company_id = agqname:company_id,
         sfsstate:state      = l_state,
         sfsstate:county     = l_county, generic

  if trun(uppercase(iix_property_char:which_protocol)) = trun(l_which_protocol_1) then
    {
      change iix_property_char
        {
          --other fields are optional or already filled in in /data/scratch
          iix_property_char:last_name                 = l_last_name_1/spacefill
          iix_property_char:first_name                = l_first_name_1/spacefill
          iix_property_char:address_format            = "P"
          iix_property_char:apt_number                = agqlocation:apt_number/spacefill
          iix_property_char:direction_prefix          = ""/spacefill
          iix_property_char:street_direction          = agqlocation:st_direction/spacefill
          iix_property_char:house_number              = agqlocation:st_number_str/spacefill
          iix_property_char:street_name               = agqlocation:street/spacefill
          iix_property_char:street_type               = agqlocation:st_type/spacefill
          iix_property_char:address2                  = ""/spacefill
          iix_property_char:city_name                 = agqlocation:city/spacefill
          iix_property_char:str_state                 = agqlocation:str_state/spacefill
          iix_property_char:county_name               = sfsstate:description/spacefill
          iix_property_char:zip_code                  = agqlocation:str_zipcode/spacefill
          iix_property_char:country                   = ""/spacefill
          iix_property_char:formatted_apn             = ""/spacefill
          iix_property_char:quoteback                 = str(g_app_no)/spacefill
        }
    }

END



procedure read_in_claim_results
BEGIN
number l_position[8];
number l_position1[8];
string l_path[100];
string l_path1[100];
L_PATH = Whichfile (l_claim_file)
l_path1 = whichfile(l_claim_error_message)
l_claims_error_message = ""
l_claim = ""
if trun(L_PATH) <> "" then    --whichfile check for existance of the l_credit_score(filename) returns ""
    {
    L_POSITION = Seekfile ( L_PATH, 0 )
    l_claim = ""
    readfile(L_PATH,l_claim,4," ")
    if val(l_claim) > 0 then
        {
        deletefile(l_path)
        }
    }
else
    {
    if trun(l_path1) <> "" then
        {
        L_POSITION = Seekfile ( L_PATH1, 0 )
        readfile(l_PATH1,l_claims_error_message)
        l_claim = "999"
        deletefile(l_path1)
        }
    }

END

procedure read_in_property_results
BEGIN
number l_position[8];
number l_position1[8];
string l_path[100];
string l_path1[100];
L_PATH = Whichfile (l_property_file)
l_path1 = whichfile(l_property_error_message)
l_property_char_error_message = ""
l_property = ""
if trun(L_PATH) <> "" then    --whichfile check for existance of the l_credit_score(filename) returns ""
    {
    L_POSITION = Seekfile ( L_PATH, 0 )
    l_property = ""
    readfile(L_PATH,l_property,4," ")
    if val(l_property) > 0 then
        {
        deletefile(l_path)
        }
    }
else
    {
    if trun(l_path1) <> "" then
        {
        L_POSITION = Seekfile ( L_PATH1, 0 )
        readfile(l_PATH1,l_property_error_message)
        l_property = "999"
        deletefile(l_path1)
        }
    }

END

End
